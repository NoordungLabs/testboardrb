
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007c00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  2000007c  08007c7c  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08007c7c  000097c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001325a  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9b  00000000  00000000  0001c306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  0001efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  0001fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0bb  00000000  00000000  000209bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bcb  00000000  00000000  0003ea7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba260  00000000  00000000  00052645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c8a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  0010c8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001104a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b7c 	.word	0x08007b7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000080 	.word	0x20000080
 8000214:	08007b7c 	.word	0x08007b7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fd09 	bl	8002f8c <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fcfd 	bl	8002f8c <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007ba4 	.word	0x08007ba4

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fce8 	bl	8002f8c <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fcda 	bl	8002f8c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007ba4 	.word	0x08007ba4

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fd98 	bl	8003150 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000098 	.word	0x20000098
 8000628:	20000099 	.word	0x20000099
 800062c:	20000000 	.word	0x20000000
 8000630:	200001ec 	.word	0x200001ec

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fd78 	bl	8003150 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fe7d 	bl	8003378 <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001ec 	.word	0x200001ec
 800068c:	20000099 	.word	0x20000099
 8000690:	20000004 	.word	0x20000004
 8000694:	2000009c 	.word	0x2000009c

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab3      	ldr	r2, [pc, #716]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815f 	bne.w	8000968 <HAL_I2C_MasterRxCpltCallback+0x2d0>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb2      	ldr	r3, [pc, #712]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4bb0      	ldr	r3, [pc, #704]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aae      	ldr	r2, [pc, #696]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4ba0      	ldr	r3, [pc, #640]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4aa0      	ldr	r2, [pc, #640]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b93      	ldr	r3, [pc, #588]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a92      	ldr	r2, [pc, #584]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b88      	ldr	r3, [pc, #544]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4987      	ldr	r1, [pc, #540]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b80      	ldr	r3, [pc, #512]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487b      	ldr	r0, [pc, #492]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4877      	ldr	r0, [pc, #476]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b71      	ldr	r3, [pc, #452]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	4970      	ldr	r1, [pc, #448]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b5a      	ldr	r3, [pc, #360]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b58      	ldr	r3, [pc, #352]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b52      	ldr	r3, [pc, #328]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b48      	ldr	r3, [pc, #288]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	494a      	ldr	r1, [pc, #296]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3d      	ldr	r3, [pc, #244]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483f      	ldr	r0, [pc, #252]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483b      	ldr	r0, [pc, #236]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4934      	ldr	r1, [pc, #208]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a23      	ldr	r2, [pc, #140]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000930:	fb83 3102 	smull	r3, r1, r3, r2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	460b      	mov	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1ad1      	subs	r1, r2, r3
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000946:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_I2C_MasterRxCpltCallback+0x310>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdf5 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 800095a:	2302      	movs	r3, #2
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <HAL_I2C_MasterRxCpltCallback+0x314>)
 800095e:	21fe      	movs	r1, #254	@ 0xfe
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000962:	f002 fbf5 	bl	8003150 <HAL_I2C_Master_Transmit_DMA>
 8000966:	e000      	b.n	800096a <HAL_I2C_MasterRxCpltCallback+0x2d2>
    if (hi2c != &hi2c3) return;
 8000968:	bf00      	nop
}
 800096a:	3738      	adds	r7, #56	@ 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	200001ec 	.word	0x200001ec
 8000974:	2000009c 	.word	0x2000009c
 8000978:	4b000000 	.word	0x4b000000
 800097c:	4b800000 	.word	0x4b800000
 8000980:	457a0000 	.word	0x457a0000
 8000984:	20000098 	.word	0x20000098
 8000988:	20000008 	.word	0x20000008
 800098c:	200000d4 	.word	0x200000d4
 8000990:	43800000 	.word	0x43800000
 8000994:	20000020 	.word	0x20000020
 8000998:	2000014c 	.word	0x2000014c
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	2aaaaaab 	.word	0x2aaaaaab
 80009a8:	20000099 	.word	0x20000099
 80009ac:	20000000 	.word	0x20000000

080009b0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_I2C_ErrorCallback+0x5e>

    HAL_I2C_DeInit(hi2c);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f002 fb96 	bl	80030f2 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f002 faf8 	bl	8002fbc <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_I2C_ErrorCallback+0x70>)
 80009d6:	fb83 3102 	smull	r3, r1, r3, r2
 80009da:	17d3      	asrs	r3, r2, #31
 80009dc:	1ac9      	subs	r1, r1, r3
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	1ad1      	subs	r1, r2, r3
 80009e8:	b2ca      	uxtb	r2, r1
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ec:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_I2C_ErrorCallback+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fda2 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000a00:	2302      	movs	r3, #2
 8000a02:	4a09      	ldr	r2, [pc, #36]	@ (8000a28 <HAL_I2C_ErrorCallback+0x78>)
 8000a04:	21fe      	movs	r1, #254	@ 0xfe
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 8000a08:	f002 fba2 	bl	8003150 <HAL_I2C_Master_Transmit_DMA>
 8000a0c:	e000      	b.n	8000a10 <HAL_I2C_ErrorCallback+0x60>
    if (hi2c != &hi2c3) return;
 8000a0e:	bf00      	nop
}
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001ec 	.word	0x200001ec
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	2aaaaaab 	.word	0x2aaaaaab
 8000a24:	20000099 	.word	0x20000099
 8000a28:	20000000 	.word	0x20000000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f001 f892 	bl	8001b5a <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  	uint32_t timepre = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f89c 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f9d8 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a50:	f000 f994 	bl	8000d7c <MX_DMA_Init>
  MX_I2C3_Init();
 8000a54:	f000 f906 	bl	8000c64 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a58:	f000 f944 	bl	8000ce4 <MX_USART1_UART_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000a5c:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <main+0x13c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b41      	ldr	r3, [pc, #260]	@ (8000b68 <main+0x13c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0210 	orr.w	r2, r2, #16
 8000a6a:	601a      	str	r2, [r3, #0]
  MX_CRC_Init();
 8000a6c:	f000 f8d8 	bl	8000c20 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a70:	f7ff fd9c 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a74:	f7ff fdc0 	bl	80005f8 <startSensorReadSequence>
  nslp_dma_init(&huart1, &hcrc);
 8000a78:	493c      	ldr	r1, [pc, #240]	@ (8000b6c <main+0x140>)
 8000a7a:	483b      	ldr	r0, [pc, #236]	@ (8000b68 <main+0x13c>)
 8000a7c:	f000 fae0 	bl	8001040 <nslp_dma_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  struct Packet Pressure = {
 8000a80:	4a3b      	ldr	r2, [pc, #236]	@ (8000b70 <main+0x144>)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000a8e:	4a39      	ldr	r2, [pc, #228]	@ (8000b74 <main+0x148>)
 8000a90:	463b      	mov	r3, r7
 8000a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a96:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  send_packet_dma(&Temperature);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fafb 	bl	8001098 <send_packet_dma>
	  send_packet_dma(&Pressure);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 faf6 	bl	8001098 <send_packet_dma>

	  valve_update(&bal1); //Purely while debugging
 8000aac:	4832      	ldr	r0, [pc, #200]	@ (8000b78 <main+0x14c>)
 8000aae:	f000 fec3 	bl	8001838 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000ab2:	f001 f8b7 	bl	8001c24 <HAL_GetTick>
 8000ab6:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b64      	cmp	r3, #100	@ 0x64
 8000ac0:	d941      	bls.n	8000b46 <main+0x11a>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac6:	482d      	ldr	r0, [pc, #180]	@ (8000b7c <main+0x150>)
 8000ac8:	f002 fa48 	bl	8002f5c <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d137      	bne.n	8000b42 <main+0x116>
			  switch (debug){
 8000ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d825      	bhi.n	8000b26 <main+0xfa>
 8000ada:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <main+0xb4>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	08000aff 	.word	0x08000aff
 8000ae8:	08000b09 	.word	0x08000b09
 8000aec:	08000b13 	.word	0x08000b13
 8000af0:	08000b1d 	.word	0x08000b1d
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4820      	ldr	r0, [pc, #128]	@ (8000b78 <main+0x14c>)
 8000af8:	f000 fe8e 	bl	8001818 <valve_set_openness>
				  break;
 8000afc:	e014      	b.n	8000b28 <main+0xfc>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000afe:	21ff      	movs	r1, #255	@ 0xff
 8000b00:	481d      	ldr	r0, [pc, #116]	@ (8000b78 <main+0x14c>)
 8000b02:	f000 fe89 	bl	8001818 <valve_set_openness>
				  break;
 8000b06:	e00f      	b.n	8000b28 <main+0xfc>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000b08:	217f      	movs	r1, #127	@ 0x7f
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <main+0x14c>)
 8000b0c:	f000 fe84 	bl	8001818 <valve_set_openness>
				  break;
 8000b10:	e00a      	b.n	8000b28 <main+0xfc>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000b12:	2164      	movs	r1, #100	@ 0x64
 8000b14:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <main+0x14c>)
 8000b16:	f000 fe7f 	bl	8001818 <valve_set_openness>
				  break;
 8000b1a:	e005      	b.n	8000b28 <main+0xfc>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000b1c:	21c8      	movs	r1, #200	@ 0xc8
 8000b1e:	4816      	ldr	r0, [pc, #88]	@ (8000b78 <main+0x14c>)
 8000b20:	f000 fe7a 	bl	8001818 <valve_set_openness>
				  break;
 8000b24:	e000      	b.n	8000b28 <main+0xfc>
			  default:
				  break;
 8000b26:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d903      	bls.n	8000b38 <main+0x10c>
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000b36:	e004      	b.n	8000b42 <main+0x116>
			  else debug++;
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  }
		  timepre = time;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	623b      	str	r3, [r7, #32]
	  }

	  rx = nslp_get_received_packet();
 8000b46:	f000 fbd5 	bl	80012f4 <nslp_get_received_packet>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <main+0x154>)
 8000b4e:	6013      	str	r3, [r2, #0]
	  if (rx && rx->payload != NULL) {
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <main+0x154>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d093      	beq.n	8000a80 <main+0x54>
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <main+0x154>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d08e      	beq.n	8000a80 <main+0x54>

		  uint8_t yay = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	74fb      	strb	r3, [r7, #19]
  {
 8000b66:	e78b      	b.n	8000a80 <main+0x54>
 8000b68:	20000300 	.word	0x20000300
 8000b6c:	200001c8 	.word	0x200001c8
 8000b70:	08007b94 	.word	0x08007b94
 8000b74:	08007b9c 	.word	0x08007b9c
 8000b78:	20000038 	.word	0x20000038
 8000b7c:	48000800 	.word	0x48000800
 8000b80:	200001c4 	.word	0x200001c4

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2238      	movs	r2, #56	@ 0x38
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 ffb8 	bl	8007b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000baa:	f004 fa31 	bl	8005010 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2340      	movs	r3, #64	@ 0x40
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 facb 	bl	8005178 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000be8:	f000 f9aa 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fdc8 	bl	800579c <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c12:	f000 f995 	bl	8000f40 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3750      	adds	r7, #80	@ 0x50
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <MX_CRC_Init+0x40>)
 8000c28:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_CRC_Init+0x3c>)
 8000c4a:	f001 f939 	bl	8001ec0 <HAL_CRC_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c54:	f000 f974 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001c8 	.word	0x200001c8
 8000c60:	40023000 	.word	0x40023000

08000c64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <MX_I2C3_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <MX_I2C3_Init+0x7c>)
 8000c72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000ca0:	f002 f98c 	bl	8002fbc <HAL_I2C_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000caa:	f000 f949 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000cb2:	f004 f915 	bl	8004ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 f940 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_I2C3_Init+0x74>)
 8000cc4:	f004 f957 	bl	8004f76 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 f937 	bl	8000f40 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001ec 	.word	0x200001ec
 8000cdc:	40007800 	.word	0x40007800
 8000ce0:	00503d58 	.word	0x00503d58

08000ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <MX_USART1_UART_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d2e:	f005 f941 	bl	8005fb4 <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d38:	f000 f902 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d40:	f006 fe17 	bl	8007972 <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f000 f8f9 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d52:	f006 fe4c 	bl	80079ee <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 f8f0 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_USART1_UART_Init+0x90>)
 8000d62:	f006 fdcd 	bl	8007900 <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 f8e8 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000300 	.word	0x20000300
 8000d78:	40013800 	.word	0x40013800

08000d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d86:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_DMA_Init+0x80>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200b      	movs	r0, #11
 8000db8:	f001 f83f 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f001 f856 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f001 f837 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dcc:	200c      	movs	r0, #12
 8000dce:	f001 f84e 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200d      	movs	r0, #13
 8000dd8:	f001 f82f 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ddc:	200d      	movs	r0, #13
 8000dde:	f001 f846 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200e      	movs	r0, #14
 8000de8:	f001 f827 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dec:	200e      	movs	r0, #14
 8000dee:	f001 f83e 	bl	8001e6e <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a46      	ldr	r2, [pc, #280]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2e:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a40      	ldr	r2, [pc, #256]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b3b      	ldr	r3, [pc, #236]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a34      	ldr	r2, [pc, #208]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <MX_GPIO_Init+0x134>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000e7c:	482e      	ldr	r0, [pc, #184]	@ (8000f38 <MX_GPIO_Init+0x138>)
 8000e7e:	f002 f885 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e88:	482c      	ldr	r0, [pc, #176]	@ (8000f3c <MX_GPIO_Init+0x13c>)
 8000e8a:	f002 f87f 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f002 f878 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000e9c:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4820      	ldr	r0, [pc, #128]	@ (8000f38 <MX_GPIO_Init+0x138>)
 8000eb6:	f001 fded 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000eba:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <MX_GPIO_Init+0x138>)
 8000ed0:	f001 fde0 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <MX_GPIO_Init+0x13c>)
 8000eea:	f001 fdd3 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <MX_GPIO_Init+0x13c>)
 8000f08:	f001 fdc4 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f0c:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f001 fdb4 	bl	8002a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000400 	.word	0x48000400

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <tx_queue_is_empty>:
// --- Transmit queue ---
static struct Packet *txQueue[NSLP_TX_QUEUE_SIZE];
static int txHead = 0;
static int txTail = 0;

static int tx_queue_is_empty() {
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
    return txHead == txTail;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <tx_queue_is_empty+0x20>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <tx_queue_is_empty+0x24>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200007bc 	.word	0x200007bc
 8000f70:	200007c0 	.word	0x200007c0

08000f74 <tx_queue_is_full>:

static int tx_queue_is_full() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    return ((txTail + 1) % NSLP_TX_QUEUE_SIZE) == txHead;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <tx_queue_is_full+0x30>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	425a      	negs	r2, r3
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	f002 0207 	and.w	r2, r2, #7
 8000f88:	bf58      	it	pl
 8000f8a:	4253      	negpl	r3, r2
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <tx_queue_is_full+0x34>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200007c0 	.word	0x200007c0
 8000fa8:	200007bc 	.word	0x200007bc

08000fac <tx_queue_enqueue>:

static void tx_queue_enqueue(struct Packet *p) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    if (!tx_queue_is_full()) {
 8000fb4:	f7ff ffde 	bl	8000f74 <tx_queue_is_full>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d111      	bne.n	8000fe2 <tx_queue_enqueue+0x36>
        txQueue[txTail] = p;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <tx_queue_enqueue+0x40>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	490b      	ldr	r1, [pc, #44]	@ (8000ff0 <tx_queue_enqueue+0x44>)
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        txTail = (txTail + 1) % NSLP_TX_QUEUE_SIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <tx_queue_enqueue+0x40>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	425a      	negs	r2, r3
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	f002 0207 	and.w	r2, r2, #7
 8000fda:	bf58      	it	pl
 8000fdc:	4253      	negpl	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	@ (8000fec <tx_queue_enqueue+0x40>)
 8000fe0:	6013      	str	r3, [r2, #0]
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200007c0 	.word	0x200007c0
 8000ff0:	2000079c 	.word	0x2000079c

08000ff4 <tx_queue_dequeue>:

static struct Packet* tx_queue_dequeue() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    if (tx_queue_is_empty()) return NULL;
 8000ffa:	f7ff ffa7 	bl	8000f4c <tx_queue_is_empty>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <tx_queue_dequeue+0x14>
 8001004:	2300      	movs	r3, #0
 8001006:	e012      	b.n	800102e <tx_queue_dequeue+0x3a>
    struct Packet *p = txQueue[txHead];
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <tx_queue_dequeue+0x44>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <tx_queue_dequeue+0x48>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	607b      	str	r3, [r7, #4]
    txHead = (txHead + 1) % NSLP_TX_QUEUE_SIZE;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <tx_queue_dequeue+0x44>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	425a      	negs	r2, r3
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	f002 0207 	and.w	r2, r2, #7
 8001024:	bf58      	it	pl
 8001026:	4253      	negpl	r3, r2
 8001028:	4a03      	ldr	r2, [pc, #12]	@ (8001038 <tx_queue_dequeue+0x44>)
 800102a:	6013      	str	r3, [r2, #0]
    return p;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200007bc 	.word	0x200007bc
 800103c:	2000079c 	.word	0x2000079c

08001040 <nslp_dma_init>:

void nslp_dma_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    nslp_dma_ctx.uart = huart;
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <nslp_dma_init+0x48>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6013      	str	r3, [r2, #0]
    nslp_dma_ctx.crc = hcrc;
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <nslp_dma_init+0x48>)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	6053      	str	r3, [r2, #4]
    txHead = txTail = 0;
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <nslp_dma_init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <nslp_dma_init+0x4c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <nslp_dma_init+0x50>)
 8001062:	6013      	str	r3, [r2, #0]
    txDone = 1;
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <nslp_dma_init+0x54>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]

    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0210 	orr.w	r2, r2, #16
 8001078:	601a      	str	r2, [r3, #0]
    nslp_start_rx_idle_dma();
 800107a:	f000 f8b9 	bl	80011f0 <nslp_start_rx_idle_dma>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000454 	.word	0x20000454
 800108c:	200007c0 	.word	0x200007c0
 8001090:	200007bc 	.word	0x200007bc
 8001094:	2000006c 	.word	0x2000006c

08001098 <send_packet_dma>:

void send_packet_dma(struct Packet *p) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    if (!p || p->size > MAX_PACKET_SIZE) return;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d042      	beq.n	800112c <send_packet_dma+0x94>

    tx_queue_enqueue(p);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff80 	bl	8000fac <tx_queue_enqueue>

    if (txDone) {
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <send_packet_dma+0x9c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03c      	beq.n	800112e <send_packet_dma+0x96>
        struct Packet *next = tx_queue_dequeue();
 80010b4:	f7ff ff9e 	bl	8000ff4 <tx_queue_dequeue>
 80010b8:	6178      	str	r0, [r7, #20]
        if (next) {
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d036      	beq.n	800112e <send_packet_dma+0x96>
            uint16_t packetSize = HEADER_SIZE + next->size;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	3302      	adds	r3, #2
 80010c6:	827b      	strh	r3, [r7, #18]
            uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 80010c8:	8a7b      	ldrh	r3, [r7, #18]
 80010ca:	3305      	adds	r3, #5
 80010cc:	823b      	strh	r3, [r7, #16]

            nslp_dma_ctx.txBuffer[0] = FRAME_START;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <send_packet_dma+0xa0>)
 80010d0:	227e      	movs	r2, #126	@ 0x7e
 80010d2:	721a      	strb	r2, [r3, #8]
            nslp_dma_ctx.txBuffer[1] = next->type;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <send_packet_dma+0xa0>)
 80010da:	725a      	strb	r2, [r3, #9]
            nslp_dma_ctx.txBuffer[2] = next->size;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	785a      	ldrb	r2, [r3, #1]
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <send_packet_dma+0xa0>)
 80010e2:	729a      	strb	r2, [r3, #10]

            memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4813      	ldr	r0, [pc, #76]	@ (800113c <send_packet_dma+0xa4>)
 80010f0:	f006 fd36 	bl	8007b60 <memcpy>

            uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <send_packet_dma+0xa0>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	8a7a      	ldrh	r2, [r7, #18]
 80010fa:	4911      	ldr	r1, [pc, #68]	@ (8001140 <send_packet_dma+0xa8>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 ff43 	bl	8001f88 <HAL_CRC_Calculate>
 8001102:	4603      	mov	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]
            memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	3303      	adds	r3, #3
 800110c:	3308      	adds	r3, #8
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <send_packet_dma+0xa0>)
 8001110:	4413      	add	r3, r2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	601a      	str	r2, [r3, #0]

            txDone = 0;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <send_packet_dma+0x9c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <send_packet_dma+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	8a3a      	ldrh	r2, [r7, #16]
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <send_packet_dma+0xac>)
 8001124:	4618      	mov	r0, r3
 8001126:	f004 ff95 	bl	8006054 <HAL_UART_Transmit_DMA>
 800112a:	e000      	b.n	800112e <send_packet_dma+0x96>
    if (!p || p->size > MAX_PACKET_SIZE) return;
 800112c:	bf00      	nop
        }
    }
}
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000006c 	.word	0x2000006c
 8001138:	20000454 	.word	0x20000454
 800113c:	2000045f 	.word	0x2000045f
 8001140:	2000045d 	.word	0x2000045d
 8001144:	2000045c 	.word	0x2000045c

08001148 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d13c      	bne.n	80011d4 <HAL_UART_TxCpltCallback+0x8c>

    struct Packet *next = tx_queue_dequeue();
 800115a:	f7ff ff4b 	bl	8000ff4 <tx_queue_dequeue>
 800115e:	6178      	str	r0, [r7, #20]
    if (next) {
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d032      	beq.n	80011cc <HAL_UART_TxCpltCallback+0x84>
        uint16_t packetSize = HEADER_SIZE + next->size;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	3302      	adds	r3, #2
 800116c:	827b      	strh	r3, [r7, #18]
        uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 800116e:	8a7b      	ldrh	r3, [r7, #18]
 8001170:	3305      	adds	r3, #5
 8001172:	823b      	strh	r3, [r7, #16]

        nslp_dma_ctx.txBuffer[0] = FRAME_START;
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 8001176:	227e      	movs	r2, #126	@ 0x7e
 8001178:	721a      	strb	r2, [r3, #8]
        nslp_dma_ctx.txBuffer[1] = next->type;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 8001180:	725a      	strb	r2, [r3, #9]
        nslp_dma_ctx.txBuffer[2] = next->size;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	785a      	ldrb	r2, [r3, #1]
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 8001188:	729a      	strb	r2, [r3, #10]

        memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	6859      	ldr	r1, [r3, #4]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	461a      	mov	r2, r3
 8001194:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <HAL_UART_TxCpltCallback+0x98>)
 8001196:	f006 fce3 	bl	8007b60 <memcpy>

        uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	8a7a      	ldrh	r2, [r7, #18]
 80011a0:	4910      	ldr	r1, [pc, #64]	@ (80011e4 <HAL_UART_TxCpltCallback+0x9c>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fef0 	bl	8001f88 <HAL_CRC_Calculate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]
        memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	3303      	adds	r3, #3
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 80011b6:	4413      	add	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	601a      	str	r2, [r3, #0]

        HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_UART_TxCpltCallback+0x94>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	8a3a      	ldrh	r2, [r7, #16]
 80011c2:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <HAL_UART_TxCpltCallback+0xa0>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 ff45 	bl	8006054 <HAL_UART_Transmit_DMA>
 80011ca:	e004      	b.n	80011d6 <HAL_UART_TxCpltCallback+0x8e>
    } else {
        txDone = 1;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <HAL_UART_TxCpltCallback+0xa4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e000      	b.n	80011d6 <HAL_UART_TxCpltCallback+0x8e>
    if (huart != nslp_dma_ctx.uart) return;
 80011d4:	bf00      	nop
    }
}
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000454 	.word	0x20000454
 80011e0:	2000045f 	.word	0x2000045f
 80011e4:	2000045d 	.word	0x2000045d
 80011e8:	2000045c 	.word	0x2000045c
 80011ec:	2000006c 	.word	0x2000006c

080011f0 <nslp_start_rx_idle_dma>:

void nslp_start_rx_idle_dma(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.rxBuffer, NSLP_RX_BUFFER_SIZE);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <nslp_start_rx_idle_dma+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011fc:	4903      	ldr	r1, [pc, #12]	@ (800120c <nslp_start_rx_idle_dma+0x1c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 ffa8 	bl	8006154 <HAL_UART_Receive_DMA>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000454 	.word	0x20000454
 800120c:	20000562 	.word	0x20000562

08001210 <HAL_UART_IDLECallback>:

void HAL_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 8001218:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	d159      	bne.n	80012d6 <HAL_UART_IDLECallback+0xc6>

    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2210      	movs	r2, #16
 8001228:	621a      	str	r2, [r3, #32]
    HAL_UART_DMAStop(huart);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f004 ffde 	bl	80061ec <HAL_UART_DMAStop>

    uint16_t rxLen = NSLP_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8001240:	82fb      	strh	r3, [r7, #22]

    if (rxLen < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	2b06      	cmp	r3, #6
 8001246:	d802      	bhi.n	800124e <HAL_UART_IDLECallback+0x3e>
        nslp_start_rx_idle_dma();
 8001248:	f7ff ffd2 	bl	80011f0 <nslp_start_rx_idle_dma>
        return;
 800124c:	e044      	b.n	80012d8 <HAL_UART_IDLECallback+0xc8>
    }

    if (nslp_dma_ctx.rxBuffer[0] != FRAME_START) {
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 8001250:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8001254:	2b7e      	cmp	r3, #126	@ 0x7e
 8001256:	d002      	beq.n	800125e <HAL_UART_IDLECallback+0x4e>
        nslp_start_rx_idle_dma();
 8001258:	f7ff ffca 	bl	80011f0 <nslp_start_rx_idle_dma>
        return;
 800125c:	e03c      	b.n	80012d8 <HAL_UART_IDLECallback+0xc8>
    }

    uint8_t size = nslp_dma_ctx.rxBuffer[2];
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 8001260:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8001264:	757b      	strb	r3, [r7, #21]
    if ((size + FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) > rxLen) {
 8001266:	7d7b      	ldrb	r3, [r7, #21]
 8001268:	1d9a      	adds	r2, r3, #6
 800126a:	8afb      	ldrh	r3, [r7, #22]
 800126c:	429a      	cmp	r2, r3
 800126e:	db02      	blt.n	8001276 <HAL_UART_IDLECallback+0x66>
        nslp_start_rx_idle_dma();
 8001270:	f7ff ffbe 	bl	80011f0 <nslp_start_rx_idle_dma>
        return;
 8001274:	e030      	b.n	80012d8 <HAL_UART_IDLECallback+0xc8>
    }

    memcpy(nslp_dma_ctx.rxData, nslp_dma_ctx.rxBuffer, size + FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE);
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	3307      	adds	r3, #7
 800127a:	461a      	mov	r2, r3
 800127c:	4919      	ldr	r1, [pc, #100]	@ (80012e4 <HAL_UART_IDLECallback+0xd4>)
 800127e:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <HAL_UART_IDLECallback+0xd8>)
 8001280:	f006 fc6e 	bl	8007b60 <memcpy>

    uint32_t crc_calc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.rxData[1], HEADER_SIZE + size);
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 8001286:	6858      	ldr	r0, [r3, #4]
 8001288:	7d7b      	ldrb	r3, [r7, #21]
 800128a:	3302      	adds	r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	4917      	ldr	r1, [pc, #92]	@ (80012ec <HAL_UART_IDLECallback+0xdc>)
 8001290:	f000 fe7a 	bl	8001f88 <HAL_CRC_Calculate>
 8001294:	6138      	str	r0, [r7, #16]
    uint32_t crc_recv = *(uint32_t *)&nslp_dma_ctx.rxData[FRAME_START_SIZE + HEADER_SIZE + size];
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	3303      	adds	r3, #3
 800129a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012a0:	4413      	add	r3, r2
 80012a2:	3302      	adds	r3, #2
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]

    if (crc_calc == crc_recv) {
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10f      	bne.n	80012d0 <HAL_UART_IDLECallback+0xc0>
        nslp_dma_ctx.rxPacket.type = nslp_dma_ctx.rxData[1];
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012b2:	f893 223b 	ldrb.w	r2, [r3, #571]	@ 0x23b
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012b8:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
        nslp_dma_ctx.rxPacket.size = nslp_dma_ctx.rxData[2];
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012be:	f893 223c 	ldrb.w	r2, [r3, #572]	@ 0x23c
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012c4:	f883 2341 	strb.w	r2, [r3, #833]	@ 0x341
        nslp_dma_ctx.rxPacket.payload = &nslp_dma_ctx.rxData[3];
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_UART_IDLECallback+0xd0>)
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <HAL_UART_IDLECallback+0xe0>)
 80012cc:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    }

    nslp_start_rx_idle_dma();
 80012d0:	f7ff ff8e 	bl	80011f0 <nslp_start_rx_idle_dma>
 80012d4:	e000      	b.n	80012d8 <HAL_UART_IDLECallback+0xc8>
    if (huart != nslp_dma_ctx.uart) return;
 80012d6:	bf00      	nop
}
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000454 	.word	0x20000454
 80012e4:	20000562 	.word	0x20000562
 80012e8:	2000068e 	.word	0x2000068e
 80012ec:	2000068f 	.word	0x2000068f
 80012f0:	20000691 	.word	0x20000691

080012f4 <nslp_get_received_packet>:

struct Packet* nslp_get_received_packet(void) {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
    return &nslp_dma_ctx.rxPacket;
 80012f8:	4b02      	ldr	r3, [pc, #8]	@ (8001304 <nslp_get_received_packet+0x10>)
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000794 	.word	0x20000794

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133e:	f003 ff0b 	bl	8005158 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_CRC_MspInit+0x38>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10b      	bne.n	800137a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_CRC_MspInit+0x3c>)
 8001364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001366:	4a09      	ldr	r2, [pc, #36]	@ (800138c <HAL_CRC_MspInit+0x3c>)
 8001368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136c:	6493      	str	r3, [r2, #72]	@ 0x48
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_CRC_MspInit+0x3c>)
 8001370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023000 	.word	0x40023000
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09a      	sub	sp, #104	@ 0x68
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2244      	movs	r2, #68	@ 0x44
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 fba9 	bl	8007b08 <memset>
  if(hi2c->Instance==I2C3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_I2C_MspInit+0x174>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f040 809c 	bne.w	80014fa <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fbff 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80013dc:	f7ff fdb0 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a48      	ldr	r2, [pc, #288]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fe:	2312      	movs	r3, #18
 8001400:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001406:	2302      	movs	r3, #2
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800140a:	2308      	movs	r3, #8
 800140c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001412:	4619      	mov	r1, r3
 8001414:	483d      	ldr	r0, [pc, #244]	@ (800150c <HAL_I2C_MspInit+0x17c>)
 8001416:	f001 fb3d 	bl	8002a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	4a3a      	ldr	r2, [pc, #232]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 8001420:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001424:	6593      	str	r3, [r2, #88]	@ 0x58
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <HAL_I2C_MspInit+0x178>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001434:	4a37      	ldr	r2, [pc, #220]	@ (8001514 <HAL_I2C_MspInit+0x184>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001438:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 800143a:	2215      	movs	r2, #21
 800143c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001440:	2210      	movs	r2, #16
 8001442:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001450:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001456:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800146a:	4829      	ldr	r0, [pc, #164]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 800146c:	f000 ff30 	bl	80022d0 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8001476:	f7ff fd63 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 800147e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001480:	4a23      	ldr	r2, [pc, #140]	@ (8001510 <HAL_I2C_MspInit+0x180>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 8001488:	4a24      	ldr	r2, [pc, #144]	@ (800151c <HAL_I2C_MspInit+0x18c>)
 800148a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 800148e:	2214      	movs	r2, #20
 8001490:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014a0:	2280      	movs	r2, #128	@ 0x80
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80014be:	4816      	ldr	r0, [pc, #88]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014c0:	f000 ff06 	bl	80022d0 <HAL_DMA_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 80014ca:	f7ff fd39 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014d4:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_I2C_MspInit+0x188>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	205c      	movs	r0, #92	@ 0x5c
 80014e0:	f000 fcab 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80014e4:	205c      	movs	r0, #92	@ 0x5c
 80014e6:	f000 fcc2 	bl	8001e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	205d      	movs	r0, #93	@ 0x5d
 80014f0:	f000 fca3 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80014f4:	205d      	movs	r0, #93	@ 0x5d
 80014f6:	f000 fcba 	bl	8001e6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3768      	adds	r7, #104	@ 0x68
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40007800 	.word	0x40007800
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800
 8001510:	20000240 	.word	0x20000240
 8001514:	40020008 	.word	0x40020008
 8001518:	200002a0 	.word	0x200002a0
 800151c:	4002001c 	.word	0x4002001c

08001520 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a13      	ldr	r2, [pc, #76]	@ (800157c <HAL_I2C_MspDeInit+0x5c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d11f      	bne.n	8001572 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_I2C_MspDeInit+0x60>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <HAL_I2C_MspDeInit+0x60>)
 8001538:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800153c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 800153e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001542:	4810      	ldr	r0, [pc, #64]	@ (8001584 <HAL_I2C_MspDeInit+0x64>)
 8001544:	f001 fc28 	bl	8002d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001548:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154c:	480d      	ldr	r0, [pc, #52]	@ (8001584 <HAL_I2C_MspDeInit+0x64>)
 800154e:	f001 fc23 	bl	8002d98 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff62 	bl	8002420 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001560:	4618      	mov	r0, r3
 8001562:	f000 ff5d 	bl	8002420 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001566:	205c      	movs	r0, #92	@ 0x5c
 8001568:	f000 fc8f 	bl	8001e8a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800156c:	205d      	movs	r0, #93	@ 0x5d
 800156e:	f000 fc8c 	bl	8001e8a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40007800 	.word	0x40007800
 8001580:	40021000 	.word	0x40021000
 8001584:	48000800 	.word	0x48000800

08001588 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09a      	sub	sp, #104	@ 0x68
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2244      	movs	r2, #68	@ 0x44
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 faad 	bl	8007b08 <memset>
  if(huart->Instance==USART1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4d      	ldr	r2, [pc, #308]	@ (80016e8 <HAL_UART_MspInit+0x160>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	f040 8093 	bne.w	80016e0 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fb04 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f7ff fcb5 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	4a44      	ldr	r2, [pc, #272]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a3e      	ldr	r2, [pc, #248]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <HAL_UART_MspInit+0x164>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001606:	2330      	movs	r3, #48	@ 0x30
 8001608:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001616:	2307      	movs	r3, #7
 8001618:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800161e:	4619      	mov	r1, r3
 8001620:	4833      	ldr	r0, [pc, #204]	@ (80016f0 <HAL_UART_MspInit+0x168>)
 8001622:	f001 fa37 	bl	8002a94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001626:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001628:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <HAL_UART_MspInit+0x170>)
 800162a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800162c:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 800162e:	2218      	movs	r2, #24
 8001630:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001632:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001638:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163e:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001640:	2280      	movs	r2, #128	@ 0x80
 8001642:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001644:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800164a:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001650:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001656:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800165c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800165e:	4825      	ldr	r0, [pc, #148]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001660:	f000 fe36 	bl	80022d0 <HAL_DMA_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800166a:	f7ff fc69 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001676:	4a1f      	ldr	r2, [pc, #124]	@ (80016f4 <HAL_UART_MspInit+0x16c>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <HAL_UART_MspInit+0x174>)
 800167e:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_UART_MspInit+0x178>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <HAL_UART_MspInit+0x174>)
 8001684:	2219      	movs	r2, #25
 8001686:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_UART_MspInit+0x174>)
 800168a:	2210      	movs	r2, #16
 800168c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_UART_MspInit+0x174>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_UART_MspInit+0x174>)
 8001696:	2280      	movs	r2, #128	@ 0x80
 8001698:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_UART_MspInit+0x174>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016b6:	f000 fe0b 	bl	80022d0 <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80016c0:	f7ff fc3e 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016ca:	4a0c      	ldr	r2, [pc, #48]	@ (80016fc <HAL_UART_MspInit+0x174>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2025      	movs	r0, #37	@ 0x25
 80016d6:	f000 fbb0 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016da:	2025      	movs	r0, #37	@ 0x25
 80016dc:	f000 fbc7 	bl	8001e6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016e0:	bf00      	nop
 80016e2:	3768      	adds	r7, #104	@ 0x68
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000800 	.word	0x48000800
 80016f4:	20000394 	.word	0x20000394
 80016f8:	40020030 	.word	0x40020030
 80016fc:	200003f4 	.word	0x200003f4
 8001700:	40020044 	.word	0x40020044

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 fa51 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Channel1_IRQHandler+0x10>)
 800176a:	f001 f82a 	bl	80027c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000240 	.word	0x20000240

08001778 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Channel2_IRQHandler+0x10>)
 800177e:	f001 f820 	bl	80027c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002a0 	.word	0x200002a0

0800178c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Channel3_IRQHandler+0x10>)
 8001792:	f001 f816 	bl	80027c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000394 	.word	0x20000394

080017a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <DMA1_Channel4_IRQHandler+0x10>)
 80017a6:	f001 f80c 	bl	80027c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003f4 	.word	0x200003f4

080017b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <USART1_IRQHandler+0x14>)
 80017ba:	f004 fdad 	bl	8006318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_IDLECallback(&huart1);  	  	  //remove this
 80017be:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <USART1_IRQHandler+0x14>)
 80017c0:	f7ff fd26 	bl	8001210 <HAL_UART_IDLECallback>
  /* USER CODE END USART1_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000300 	.word	0x20000300

080017cc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <I2C3_EV_IRQHandler+0x10>)
 80017d2:	f001 fec1 	bl	8003558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001ec 	.word	0x200001ec

080017e0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <I2C3_ER_IRQHandler+0x10>)
 80017e6:	f001 fed1 	bl	800358c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001ec 	.word	0x200001ec

080017f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <valve_update>:

void valve_update(ValveController* valve) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001840:	f000 f9f0 	bl	8001c24 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]
    int16_t delta;
    uint32_t elapsed;
    uint8_t new_position;

    switch (valve->state) {
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800184c:	2b02      	cmp	r3, #2
 800184e:	f000 80dd 	beq.w	8001a0c <valve_update+0x1d4>
 8001852:	2b02      	cmp	r3, #2
 8001854:	f300 8148 	bgt.w	8001ae8 <valve_update+0x2b0>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <valve_update+0x2a>
 800185c:	2b01      	cmp	r3, #1
 800185e:	d06e      	beq.n	800193e <valve_update+0x106>
 8001860:	e142      	b.n	8001ae8 <valve_update+0x2b0>
        case VALVE_IDLE:
            if (valve->target_openness != valve->current_openness) {
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800186e:	429a      	cmp	r2, r3
 8001870:	f000 813f 	beq.w	8001af2 <valve_update+0x2ba>
                delta = (int16_t)valve->target_openness - (int16_t)valve->current_openness;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	817b      	strh	r3, [r7, #10]

                if (delta > 0) {
 8001888:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd1d      	ble.n	80018cc <valve_update+0x94>
                    valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 8001890:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	69d2      	ldr	r2, [r2, #28]
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a99      	ldr	r2, [pc, #612]	@ (8001b04 <valve_update+0x2cc>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	09da      	lsrs	r2, r3, #7
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_SET);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2201      	movs	r2, #1
 80018bc:	4619      	mov	r1, r3
 80018be:	f001 fb65 	bl	8002f8c <HAL_GPIO_WritePin>
                    valve->state = VALVE_OPENING;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                else {
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
                }
            }
            break;
 80018ca:	e112      	b.n	8001af2 <valve_update+0x2ba>
                } else if (delta < 0) {
 80018cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da1f      	bge.n	8001914 <valve_update+0xdc>
                    valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 80018d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018d8:	425b      	negs	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a87      	ldr	r2, [pc, #540]	@ (8001b04 <valve_update+0x2cc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	09da      	lsrs	r2, r3, #7
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_SET);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4618      	mov	r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	b29b      	uxth	r3, r3
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	f001 fb41 	bl	8002f8c <HAL_GPIO_WritePin>
                    valve->state = VALVE_CLOSING;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001912:	e0ee      	b.n	8001af2 <valve_update+0x2ba>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	b29b      	uxth	r3, r3
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	f001 fb32 	bl	8002f8c <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	f001 fb28 	bl	8002f8c <HAL_GPIO_WritePin>
            break;
 800193c:	e0d9      	b.n	8001af2 <valve_update+0x2ba>

        case VALVE_OPENING:
            // Check for new target during movement
            elapsed = now - valve->start_time;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	d314      	bcc.n	800197c <valve_update+0x144>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f001 fb13 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 800197a:	e0bf      	b.n	8001afc <valve_update+0x2c4>
            }

            // Calculate new openness based on time
            new_position = valve->current_openness + ((uint32_t)elapsed * 255 / valve->timeO);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4613      	mov	r3, r2
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	1a9a      	subs	r2, r3, r2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	440b      	add	r3, r1
 8001996:	75fb      	strb	r3, [r7, #23]
            if (new_position > 255) new_position = 255;

            // If target changed mid-movement, recalculate
            if (valve->target_openness < new_position) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800199e:	7dfa      	ldrb	r2, [r7, #23]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d912      	bls.n	80019ca <valve_update+0x192>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	f001 faea 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7dfa      	ldrb	r2, [r7, #23]
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80019c8:	e098      	b.n	8001afc <valve_update+0x2c4>
            }

            // Safety fallback: end movement if valve stopped moving
            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f001 fabf 	bl	8002f5c <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8088 	bne.w	8001af6 <valve_update+0x2be>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2200      	movs	r2, #0
 80019f4:	4619      	mov	r1, r3
 80019f6:	f001 fac9 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = 255;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	22ff      	movs	r2, #255	@ 0xff
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001a0a:	e074      	b.n	8001af6 <valve_update+0x2be>

        case VALVE_CLOSING:
            elapsed = now - valve->start_time;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d314      	bcc.n	8001a4a <valve_update+0x212>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f001 faac 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001a48:	e058      	b.n	8001afc <valve_update+0x2c4>
            }

            new_position = valve->current_openness - ((uint32_t)elapsed * 255 / valve->timeC);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	1a9a      	subs	r2, r3, r2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	1acb      	subs	r3, r1, r3
 8001a64:	75fb      	strb	r3, [r7, #23]
            if (new_position > valve->current_openness) new_position = 0; // wrap protection
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a6c:	7dfa      	ldrb	r2, [r7, #23]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d901      	bls.n	8001a76 <valve_update+0x23e>
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

            if (valve->target_openness > new_position) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a7c:	7dfa      	ldrb	r2, [r7, #23]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d212      	bcs.n	8001aa8 <valve_update+0x270>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	f001 fa7b 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7dfa      	ldrb	r2, [r7, #23]
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001aa6:	e029      	b.n	8001afc <valve_update+0x2c4>
            }

            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f001 fa50 	bl	8002f5c <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11b      	bne.n	8001afa <valve_update+0x2c2>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f001 fa5b 	bl	8002f8c <HAL_GPIO_WritePin>
                valve->current_openness = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001ae6:	e008      	b.n	8001afa <valve_update+0x2c2>

        default:
            valve->state = VALVE_IDLE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001af0:	e004      	b.n	8001afc <valve_update+0x2c4>
            break;
 8001af2:	bf00      	nop
 8001af4:	e002      	b.n	8001afc <valve_update+0x2c4>
            break;
 8001af6:	bf00      	nop
 8001af8:	e000      	b.n	8001afc <valve_update+0x2c4>
            break;
 8001afa:	bf00      	nop
    }
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80808081 	.word	0x80808081

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff fe72 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopForever+0xe>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopForever+0x16>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f005 ffef 	bl	8007b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7fe ff77 	bl	8000a2c <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   r0, =_estack
 8001b40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b4c:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 8001b50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b54:	200007c8 	.word	0x200007c8

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>

08001b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f95d 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f000 f80e 	bl	8001b8c <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e001      	b.n	8001b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7c:	f7ff fbc4 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b80:	79fb      	ldrb	r3, [r7, #7]

}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_InitTick+0x6c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_InitTick+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f976 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f000 f934 	bl	8001e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000078 	.word	0x20000078
 8001bf8:	20000070 	.word	0x20000070
 8001bfc:	20000074 	.word	0x20000074

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <HAL_IncTick+0x1c>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200007c4 	.word	0x200007c4
 8001c20:	20000078 	.word	0x20000078

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200007c4 	.word	0x200007c4

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db12      	blt.n	8001d14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	490a      	ldr	r1, [pc, #40]	@ (8001d20 <__NVIC_DisableIRQ+0x44>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	3320      	adds	r3, #32
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d08:	f3bf 8f4f 	dsb	sy
}
 8001d0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0e:	f3bf 8f6f 	isb	sy
}
 8001d12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	@ (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	@ (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	@ 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff05 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff1c 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff90 	bl	8001d78 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5f 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff0f 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff1f 	bl	8001cdc <__NVIC_DisableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff96 	bl	8001de0 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e054      	b.n	8001f7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7f5b      	ldrb	r3, [r3, #29]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fa34 	bl	8001350 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <HAL_CRC_Init+0xc4>)
 8001efc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0218 	bic.w	r2, r2, #24
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	e00c      	b.n	8001f2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f94a 	bl	80021b4 <HAL_CRCEx_Polynomial_Set>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e028      	b.n	8001f7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	795b      	ldrb	r3, [r3, #5]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	e004      	b.n	8001f48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6912      	ldr	r2, [r2, #16]
 8001f46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	04c11db7 	.word	0x04c11db7

08001f88 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d006      	beq.n	8001fc4 <HAL_CRC_Calculate+0x3c>
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d829      	bhi.n	800200e <HAL_CRC_Calculate+0x86>
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d019      	beq.n	8001ff2 <HAL_CRC_Calculate+0x6a>
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d01e      	beq.n	8002000 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001fc2:	e024      	b.n	800200e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	441a      	add	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3f0      	bcc.n	8001fca <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
      break;
 8001ff0:	e00e      	b.n	8002010 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f812 	bl	8002020 <CRC_Handle_8>
 8001ffc:	6138      	str	r0, [r7, #16]
      break;
 8001ffe:	e007      	b.n	8002010 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f89b 	bl	8002140 <CRC_Handle_16>
 800200a:	6138      	str	r0, [r7, #16]
      break;
 800200c:	e000      	b.n	8002010 <HAL_CRC_Calculate+0x88>
      break;
 800200e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002016:	693b      	ldr	r3, [r7, #16]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	@ 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	e023      	b.n	800207a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3301      	adds	r3, #1
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	440b      	add	r3, r1
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800204c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	440b      	add	r3, r1
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800205c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3303      	adds	r3, #3
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	440b      	add	r3, r1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002070:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3301      	adds	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3d6      	bcc.n	8002032 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04f      	beq.n	800212e <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	4413      	add	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d117      	bne.n	80020e2 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	3301      	adds	r3, #1
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	440b      	add	r3, r1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	8b7a      	ldrh	r2, [r7, #26]
 80020e0:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d120      	bne.n	800212e <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3301      	adds	r3, #1
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	440b      	add	r3, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	8b7a      	ldrh	r2, [r7, #26]
 800211a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3724      	adds	r7, #36	@ 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e013      	b.n	800217a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	440b      	add	r3, r1
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3e6      	bcc.n	8002152 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4413      	add	r3, r2
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021c4:	231f      	movs	r3, #31
 80021c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	e063      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021d8:	bf00      	nop
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	613a      	str	r2, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_CRCEx_Polynomial_Set+0x44>
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b18      	cmp	r3, #24
 80021fc:	d846      	bhi.n	800228c <HAL_CRCEx_Polynomial_Set+0xd8>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002293 	.word	0x08002293
 8002208:	0800228d 	.word	0x0800228d
 800220c:	0800228d 	.word	0x0800228d
 8002210:	0800228d 	.word	0x0800228d
 8002214:	0800228d 	.word	0x0800228d
 8002218:	0800228d 	.word	0x0800228d
 800221c:	0800228d 	.word	0x0800228d
 8002220:	0800228d 	.word	0x0800228d
 8002224:	08002281 	.word	0x08002281
 8002228:	0800228d 	.word	0x0800228d
 800222c:	0800228d 	.word	0x0800228d
 8002230:	0800228d 	.word	0x0800228d
 8002234:	0800228d 	.word	0x0800228d
 8002238:	0800228d 	.word	0x0800228d
 800223c:	0800228d 	.word	0x0800228d
 8002240:	0800228d 	.word	0x0800228d
 8002244:	08002275 	.word	0x08002275
 8002248:	0800228d 	.word	0x0800228d
 800224c:	0800228d 	.word	0x0800228d
 8002250:	0800228d 	.word	0x0800228d
 8002254:	0800228d 	.word	0x0800228d
 8002258:	0800228d 	.word	0x0800228d
 800225c:	0800228d 	.word	0x0800228d
 8002260:	0800228d 	.word	0x0800228d
 8002264:	08002269 	.word	0x08002269
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d913      	bls.n	8002296 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002272:	e010      	b.n	8002296 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b07      	cmp	r3, #7
 8002278:	d90f      	bls.n	800229a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800227e:	e00c      	b.n	800229a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d90b      	bls.n	800229e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800228a:	e008      	b.n	800229e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
        break;
 8002290:	e006      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002292:	bf00      	nop
 8002294:	e004      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800229e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 0118 	bic.w	r1, r3, #24
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e08d      	b.n	80023fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HAL_DMA_Init+0x138>)
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d80f      	bhi.n	800230e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b45      	ldr	r3, [pc, #276]	@ (800240c <HAL_DMA_Init+0x13c>)
 80022f6:	4413      	add	r3, r2
 80022f8:	4a45      	ldr	r2, [pc, #276]	@ (8002410 <HAL_DMA_Init+0x140>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	009a      	lsls	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_DMA_Init+0x144>)
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
 800230c:	e00e      	b.n	800232c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	4b40      	ldr	r3, [pc, #256]	@ (8002418 <HAL_DMA_Init+0x148>)
 8002316:	4413      	add	r3, r2
 8002318:	4a3d      	ldr	r2, [pc, #244]	@ (8002410 <HAL_DMA_Init+0x140>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	009a      	lsls	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <HAL_DMA_Init+0x14c>)
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fb26 	bl	80029d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800238c:	d102      	bne.n	8002394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_DMA_Init+0x104>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d80c      	bhi.n	80023d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fb46 	bl	8002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e008      	b.n	80023e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40020407 	.word	0x40020407
 800240c:	bffdfff8 	.word	0xbffdfff8
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	40020000 	.word	0x40020000
 8002418:	bffdfbf8 	.word	0xbffdfbf8
 800241c:	40020400 	.word	0x40020400

08002420 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07b      	b.n	800252a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <HAL_DMA_DeInit+0x114>)
 800244a:	429a      	cmp	r2, r3
 800244c:	d80f      	bhi.n	800246e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_DMA_DeInit+0x118>)
 8002456:	4413      	add	r3, r2
 8002458:	4a38      	ldr	r2, [pc, #224]	@ (800253c <HAL_DMA_DeInit+0x11c>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <HAL_DMA_DeInit+0x120>)
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
 800246c:	e00e      	b.n	800248c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_DMA_DeInit+0x124>)
 8002476:	4413      	add	r3, r2
 8002478:	4a30      	ldr	r2, [pc, #192]	@ (800253c <HAL_DMA_DeInit+0x11c>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <HAL_DMA_DeInit+0x128>)
 800248a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa91 	bl	80029d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024be:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00f      	beq.n	80024e8 <HAL_DMA_DeInit+0xc8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d80b      	bhi.n	80024e8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fabb 	bl	8002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024e6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020407 	.word	0x40020407
 8002538:	bffdfff8 	.word	0xbffdfff8
 800253c:	cccccccd 	.word	0xcccccccd
 8002540:	40020000 	.word	0x40020000
 8002544:	bffdfbf8 	.word	0xbffdfbf8
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_DMA_Start_IT+0x20>
 8002568:	2302      	movs	r3, #2
 800256a:	e066      	b.n	800263a <HAL_DMA_Start_IT+0xee>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d155      	bne.n	800262c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f9d5 	bl	8002954 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 020e 	orr.w	r2, r2, #14
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00f      	b.n	80025e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 020a 	orr.w	r2, r2, #10
 80025e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002600:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e005      	b.n	8002638 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d005      	beq.n	8002666 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	e037      	b.n	80026d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 020e 	bic.w	r2, r2, #14
 8002674:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002684:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 021f 	and.w	r2, r3, #31
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d00d      	beq.n	8002728 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2204      	movs	r2, #4
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e047      	b.n	80027b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 020e 	bic.w	r2, r2, #14
 8002736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002774:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800278c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002796:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
    }
  }
  return status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2204      	movs	r2, #4
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d026      	beq.n	800283c <HAL_DMA_IRQHandler+0x7a>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d021      	beq.n	800283c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0204 	bic.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2104      	movs	r1, #4
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	2b00      	cmp	r3, #0
 8002830:	d071      	beq.n	8002916 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800283a:	e06c      	b.n	8002916 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2202      	movs	r2, #2
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02e      	beq.n	80028ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d029      	beq.n	80028ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020a 	bic.w	r2, r2, #10
 8002876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2102      	movs	r1, #2
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d038      	beq.n	8002916 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028ac:	e033      	b.n	8002916 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2208      	movs	r2, #8
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d02a      	beq.n	8002918 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d025      	beq.n	8002918 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020e 	bic.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002916:	bf00      	nop
 8002918:	bf00      	nop
}
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800292e:	b2db      	uxtb	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800296a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d108      	bne.n	80029b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029b2:	e007      	b.n	80029c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d802      	bhi.n	80029ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80029e4:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e001      	b.n	80029ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029ec:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3b08      	subs	r3, #8
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40020407 	.word	0x40020407
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020820 	.word	0x40020820
 8002a44:	cccccccd 	.word	0xcccccccd
 8002a48:	40020880 	.word	0x40020880

08002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a6e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	1000823f 	.word	0x1000823f
 8002a90:	40020940 	.word	0x40020940

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aa2:	e15a      	b.n	8002d5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 814c 	beq.w	8002d54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d005      	beq.n	8002ad4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d130      	bne.n	8002b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 0201 	and.w	r2, r3, #1
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d017      	beq.n	8002b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d123      	bne.n	8002bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	6939      	ldr	r1, [r7, #16]
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80a6 	beq.w	8002d54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c08:	4b5b      	ldr	r3, [pc, #364]	@ (8002d78 <HAL_GPIO_Init+0x2e4>)
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d78 <HAL_GPIO_Init+0x2e4>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c14:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <HAL_GPIO_Init+0x2e4>)
 8002c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c20:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_GPIO_Init+0x2e8>)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c4a:	d01f      	beq.n	8002c8c <HAL_GPIO_Init+0x1f8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002d80 <HAL_GPIO_Init+0x2ec>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d019      	beq.n	8002c88 <HAL_GPIO_Init+0x1f4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a4b      	ldr	r2, [pc, #300]	@ (8002d84 <HAL_GPIO_Init+0x2f0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_GPIO_Init+0x1f0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_GPIO_Init+0x2f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00d      	beq.n	8002c80 <HAL_GPIO_Init+0x1ec>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a49      	ldr	r2, [pc, #292]	@ (8002d8c <HAL_GPIO_Init+0x2f8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <HAL_GPIO_Init+0x1e8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a48      	ldr	r2, [pc, #288]	@ (8002d90 <HAL_GPIO_Init+0x2fc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_GPIO_Init+0x1e4>
 8002c74:	2305      	movs	r3, #5
 8002c76:	e00a      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c78:	2306      	movs	r3, #6
 8002c7a:	e008      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e006      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c80:	2303      	movs	r3, #3
 8002c82:	e004      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e002      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	f002 0203 	and.w	r2, r2, #3
 8002c94:	0092      	lsls	r2, r2, #2
 8002c96:	4093      	lsls	r3, r2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c9e:	4937      	ldr	r1, [pc, #220]	@ (8002d7c <HAL_GPIO_Init+0x2e8>)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cac:	4b39      	ldr	r3, [pc, #228]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd0:	4a30      	ldr	r2, [pc, #192]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cfa:	4a26      	ldr	r2, [pc, #152]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d00:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d24:	4a1b      	ldr	r2, [pc, #108]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d4e:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f ae9d 	bne.w	8002aa4 <HAL_GPIO_Init+0x10>
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	48000400 	.word	0x48000400
 8002d84:	48000800 	.word	0x48000800
 8002d88:	48000c00 	.word	0x48000c00
 8002d8c:	48001000 	.word	0x48001000
 8002d90:	48001400 	.word	0x48001400
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002da6:	e0bd      	b.n	8002f24 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002da8:	2201      	movs	r2, #1
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80b0 	beq.w	8002f1e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a60      	ldr	r2, [pc, #384]	@ (8002f40 <HAL_GPIO_DeInit+0x1a8>)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002de6:	d01f      	beq.n	8002e28 <HAL_GPIO_DeInit+0x90>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a56      	ldr	r2, [pc, #344]	@ (8002f44 <HAL_GPIO_DeInit+0x1ac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d019      	beq.n	8002e24 <HAL_GPIO_DeInit+0x8c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a55      	ldr	r2, [pc, #340]	@ (8002f48 <HAL_GPIO_DeInit+0x1b0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_GPIO_DeInit+0x88>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a54      	ldr	r2, [pc, #336]	@ (8002f4c <HAL_GPIO_DeInit+0x1b4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00d      	beq.n	8002e1c <HAL_GPIO_DeInit+0x84>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a53      	ldr	r2, [pc, #332]	@ (8002f50 <HAL_GPIO_DeInit+0x1b8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <HAL_GPIO_DeInit+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a52      	ldr	r2, [pc, #328]	@ (8002f54 <HAL_GPIO_DeInit+0x1bc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_GPIO_DeInit+0x7c>
 8002e10:	2305      	movs	r3, #5
 8002e12:	e00a      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e14:	2306      	movs	r3, #6
 8002e16:	e008      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_DeInit+0x92>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d132      	bne.n	8002ea0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e3a:	4b47      	ldr	r3, [pc, #284]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4945      	ldr	r1, [pc, #276]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002e48:	4b43      	ldr	r3, [pc, #268]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	4941      	ldr	r1, [pc, #260]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002e56:	4b40      	ldr	r3, [pc, #256]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	493e      	ldr	r1, [pc, #248]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e64:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	493a      	ldr	r1, [pc, #232]	@ (8002f58 <HAL_GPIO_DeInit+0x1c0>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e82:	4a2f      	ldr	r2, [pc, #188]	@ (8002f40 <HAL_GPIO_DeInit+0x1a8>)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	482b      	ldr	r0, [pc, #172]	@ (8002f40 <HAL_GPIO_DeInit+0x1a8>)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	400a      	ands	r2, r1
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	08d2      	lsrs	r2, r2, #3
 8002ed4:	4019      	ands	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2103      	movs	r1, #3
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3301      	adds	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f af3b 	bne.w	8002da8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40010000 	.word	0x40010000
 8002f44:	48000400 	.word	0x48000400
 8002f48:	48000800 	.word	0x48000800
 8002f4c:	48000c00 	.word	0x48000c00
 8002f50:	48001000 	.word	0x48001000
 8002f54:	48001400 	.word	0x48001400
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e001      	b.n	8002f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08d      	b.n	80030ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe f9d4 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800300c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800301c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	e006      	b.n	8003044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d108      	bne.n	800305e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e007      	b.n	800306e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800307c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69d9      	ldr	r1, [r3, #28]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1a      	ldr	r2, [r3, #32]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e021      	b.n	8003148 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	@ 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fe f9ff 	bl	8001520 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	460b      	mov	r3, r1
 800315e:	817b      	strh	r3, [r7, #10]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b20      	cmp	r3, #32
 8003172:	f040 80ef 	bne.w	8003354 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003184:	d101      	bne.n	800318a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	e0e5      	b.n	8003356 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003194:	2302      	movs	r3, #2
 8003196:	e0de      	b.n	8003356 <HAL_I2C_Master_Transmit_DMA+0x206>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2210      	movs	r2, #16
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	893a      	ldrh	r2, [r7, #8]
 80031c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a66      	ldr	r2, [pc, #408]	@ (8003360 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a66      	ldr	r2, [pc, #408]	@ (8003364 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80031cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2bff      	cmp	r3, #255	@ 0xff
 80031d6:	d906      	bls.n	80031e6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	22ff      	movs	r2, #255	@ 0xff
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e007      	b.n	80031f6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01a      	beq.n	8003234 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d074      	beq.n	8003326 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d022      	beq.n	800328a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	4a47      	ldr	r2, [pc, #284]	@ (8003368 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	4a46      	ldr	r2, [pc, #280]	@ (800336c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003252:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	2200      	movs	r2, #0
 8003262:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003274:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800327a:	f7ff f967 	bl	800254c <HAL_DMA_Start_IT>
 800327e:	4603      	mov	r3, r0
 8003280:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d13a      	bne.n	80032fe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003288:	e013      	b.n	80032b2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e051      	b.n	8003356 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	4b2c      	ldr	r3, [pc, #176]	@ (8003370 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f001 fcf7 	bl	8004cb8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032e4:	2110      	movs	r1, #16
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f001 fd18 	bl	8004d1c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e028      	b.n	8003350 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e017      	b.n	8003356 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a12      	ldr	r2, [pc, #72]	@ (8003374 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f001 fcbc 	bl	8004cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003348:	2101      	movs	r1, #1
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f001 fce6 	bl	8004d1c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	ffff0000 	.word	0xffff0000
 8003364:	08003b53 	.word	0x08003b53
 8003368:	08004b23 	.word	0x08004b23
 800336c:	08004c4f 	.word	0x08004c4f
 8003370:	80002000 	.word	0x80002000
 8003374:	080036e3 	.word	0x080036e3

08003378 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
 8003388:	4613      	mov	r3, r2
 800338a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	f040 80cd 	bne.w	8003534 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0c3      	b.n	8003536 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_I2C_Master_Receive_DMA+0x44>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0bc      	b.n	8003536 <HAL_I2C_Master_Receive_DMA+0x1be>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2222      	movs	r2, #34	@ 0x22
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2210      	movs	r2, #16
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	893a      	ldrh	r2, [r7, #8]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a55      	ldr	r2, [pc, #340]	@ (8003540 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a55      	ldr	r2, [pc, #340]	@ (8003544 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2bff      	cmp	r3, #255	@ 0xff
 80033fa:	d906      	bls.n	800340a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	22ff      	movs	r2, #255	@ 0xff
 8003400:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e007      	b.n	800341a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003418:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	d070      	beq.n	8003504 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	4a46      	ldr	r2, [pc, #280]	@ (8003548 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003430:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	4a45      	ldr	r2, [pc, #276]	@ (800354c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003438:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	2200      	movs	r2, #0
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3324      	adds	r3, #36	@ 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800345c:	f7ff f876 	bl	800254c <HAL_DMA_Start_IT>
 8003460:	4603      	mov	r3, r0
 8003462:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d138      	bne.n	80034dc <HAL_I2C_Master_Receive_DMA+0x164>
 800346a:	e013      	b.n	8003494 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e050      	b.n	8003536 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	b2da      	uxtb	r2, r3
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f001 fc08 	bl	8004cb8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80034c2:	2110      	movs	r1, #16
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f001 fc29 	bl	8004d1c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e029      	b.n	8003530 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f0:	f043 0210 	orr.w	r2, r3, #16
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e018      	b.n	8003536 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8003508:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	b2da      	uxtb	r2, r3
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f001 fbcc 	bl	8004cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003528:	2102      	movs	r1, #2
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f001 fbf6 	bl	8004d1c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	08003b53 	.word	0x08003b53
 8003548:	08004bb9 	.word	0x08004bb9
 800354c:	08004c4f 	.word	0x08004c4f
 8003550:	80002400 	.word	0x80002400
 8003554:	080036e3 	.word	0x080036e3

08003558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
  }
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	09db      	lsrs	r3, r3, #7
 80035b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0a9b      	lsrs	r3, r3, #10
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d010      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	09db      	lsrs	r3, r3, #7
 80035e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	09db      	lsrs	r3, r3, #7
 8003610:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 030b 	and.w	r3, r3, #11
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 f933 	bl	80048ac <I2C_ITError>
  }
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	4613      	mov	r3, r2
 8003684:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b088      	sub	sp, #32
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <I2C_Master_ISR_IT+0x1e>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e120      	b.n	8003942 <I2C_Master_ISR_IT+0x260>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2210      	movs	r2, #16
 8003726:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f001 f9d0 	bl	8004ada <I2C_Flush_TXDR>
 800373a:	e0ed      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	089b      	lsrs	r3, r3, #2
 800374c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01d      	beq.n	8003790 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800378e:	e0c3      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d12a      	bne.n	80037f2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d024      	beq.n	80037f2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01e      	beq.n	80037f2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80ac 	beq.w	8003918 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80037f0:	e092      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	09db      	lsrs	r3, r3, #7
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d05d      	beq.n	80038ba <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003806:	2b00      	cmp	r3, #0
 8003808:	d057      	beq.n	80038ba <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d040      	beq.n	8003896 <I2C_Master_ISR_IT+0x1b4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d13c      	bne.n	8003896 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003828:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2bff      	cmp	r3, #255	@ 0xff
 8003832:	d90e      	bls.n	8003852 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22ff      	movs	r2, #255	@ 0xff
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8a79      	ldrh	r1, [r7, #18]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f001 fa34 	bl	8004cb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003850:	e032      	b.n	80038b8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003864:	d00b      	beq.n	800387e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003870:	8a79      	ldrh	r1, [r7, #18]
 8003872:	2000      	movs	r0, #0
 8003874:	9000      	str	r0, [sp, #0]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f001 fa1e 	bl	8004cb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800387c:	e01c      	b.n	80038b8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	8a79      	ldrh	r1, [r7, #18]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f001 fa12 	bl	8004cb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003894:	e010      	b.n	80038b8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a4:	d003      	beq.n	80038ae <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fcdb 	bl	8004262 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ac:	e034      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038ae:	2140      	movs	r1, #64	@ 0x40
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fffb 	bl	80048ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b6:	e02f      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
 80038b8:	e02e      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d022      	beq.n	8003918 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d119      	bne.n	8003910 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ea:	d015      	beq.n	8003918 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038f4:	d108      	bne.n	8003908 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	e007      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fcaa 	bl	8004262 <I2C_ITMasterSeqCplt>
 800390e:	e003      	b.n	8003918 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003910:	2140      	movs	r1, #64	@ 0x40
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 ffca 	bl	80048ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fd30 	bl	8004398 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <I2C_Slave_ISR_IT+0x24>
 800396a:	2302      	movs	r3, #2
 800396c:	e0ed      	b.n	8003b4a <I2C_Slave_ISR_IT+0x200>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fdcb 	bl	800452c <I2C_ITSlaveCplt>
 8003996:	e0d3      	b.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d04d      	beq.n	8003a40 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d047      	beq.n	8003a40 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d128      	bne.n	8003a0c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b28      	cmp	r3, #40	@ 0x28
 80039c4:	d108      	bne.n	80039d8 <I2C_Slave_ISR_IT+0x8e>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039cc:	d104      	bne.n	80039d8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039ce:	6939      	ldr	r1, [r7, #16]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 ff15 	bl	8004800 <I2C_ITListenCplt>
 80039d6:	e032      	b.n	8003a3e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b29      	cmp	r3, #41	@ 0x29
 80039e2:	d10e      	bne.n	8003a02 <I2C_Slave_ISR_IT+0xb8>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ea:	d00a      	beq.n	8003a02 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2210      	movs	r2, #16
 80039f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 f870 	bl	8004ada <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc6e 	bl	80042dc <I2C_ITSlaveSeqCplt>
 8003a00:	e01d      	b.n	8003a3e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a0a:	e096      	b.n	8003b3a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <I2C_Slave_ISR_IT+0xe6>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a2c:	f040 8085 	bne.w	8003b3a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	4619      	mov	r1, r3
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 ff38 	bl	80048ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a3c:	e07d      	b.n	8003b3a <I2C_Slave_ISR_IT+0x1f0>
 8003a3e:	e07c      	b.n	8003b3a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d030      	beq.n	8003aae <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02a      	beq.n	8003aae <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d14f      	bne.n	8003b3e <I2C_Slave_ISR_IT+0x1f4>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa4:	d04b      	beq.n	8003b3e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fc18 	bl	80042dc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003aac:	e047      	b.n	8003b3e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb46 	bl	800415a <I2C_ITAddrCplt>
 8003ace:	e037      	b.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d031      	beq.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b22:	e00d      	b.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b2a:	d002      	beq.n	8003b32 <I2C_Slave_ISR_IT+0x1e8>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fbd2 	bl	80042dc <I2C_ITSlaveSeqCplt>
 8003b38:	e002      	b.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003b3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b088      	sub	sp, #32
 8003b56:	af02      	add	r7, sp, #8
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <I2C_Master_ISR_DMA+0x1a>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e0e1      	b.n	8003d30 <I2C_Master_ISR_DMA+0x1de>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d017      	beq.n	8003bb0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d011      	beq.n	8003bb0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2210      	movs	r2, #16
 8003b92:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f001 f8ba 	bl	8004d1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 ff96 	bl	8004ada <I2C_Flush_TXDR>
 8003bae:	e0ba      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	09db      	lsrs	r3, r3, #7
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d072      	beq.n	8003ca2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d06c      	beq.n	8003ca2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04e      	beq.n	8003c80 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2bff      	cmp	r3, #255	@ 0xff
 8003bf8:	d906      	bls.n	8003c08 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	22ff      	movs	r2, #255	@ 0xff
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e010      	b.n	8003c2a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c1a:	d003      	beq.n	8003c24 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e002      	b.n	8003c2a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003c24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c28:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	8a79      	ldrh	r1, [r7, #18]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f001 f83d 	bl	8004cb8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b22      	cmp	r3, #34	@ 0x22
 8003c5a:	d108      	bne.n	8003c6e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c6c:	e05b      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c7e:	e052      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c8e:	d003      	beq.n	8003c98 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fae6 	bl	8004262 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003c96:	e046      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fe06 	bl	80048ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003ca0:	e041      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d029      	beq.n	8003d02 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d023      	beq.n	8003d02 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d119      	bne.n	8003cf8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cd2:	d027      	beq.n	8003d24 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cdc:	d108      	bne.n	8003cf0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cec:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cee:	e019      	b.n	8003d24 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fab6 	bl	8004262 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003cf6:	e015      	b.n	8003d24 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003cf8:	2140      	movs	r1, #64	@ 0x40
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fdd6 	bl	80048ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d00:	e010      	b.n	8003d24 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fb3b 	bl	8004398 <I2C_ITMasterCplt>
 8003d22:	e000      	b.n	8003d26 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003d24:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d44:	4b92      	ldr	r3, [pc, #584]	@ (8003f90 <I2C_Mem_ISR_DMA+0x258>)
 8003d46:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <I2C_Mem_ISR_DMA+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e118      	b.n	8003f88 <I2C_Mem_ISR_DMA+0x250>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d017      	beq.n	8003d9a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d011      	beq.n	8003d9a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f043 0204 	orr.w	r2, r3, #4
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 ffc5 	bl	8004d1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fea1 	bl	8004ada <I2C_Flush_TXDR>
 8003d98:	e0f1      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00f      	beq.n	8003dc6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003dc4:	e0db      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	09db      	lsrs	r3, r3, #7
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d060      	beq.n	8003e94 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d05a      	beq.n	8003e94 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003dde:	2101      	movs	r1, #1
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f001 f81f 	bl	8004e24 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003de6:	2110      	movs	r1, #16
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 ff97 	bl	8004d1c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d048      	beq.n	8003e8a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2bff      	cmp	r3, #255	@ 0xff
 8003e00:	d910      	bls.n	8003e24 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	b299      	uxth	r1, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 ff4b 	bl	8004cb8 <I2C_TransferConfig>
 8003e22:	e011      	b.n	8003e48 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e32:	b299      	uxth	r1, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 ff38 	bl	8004cb8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b22      	cmp	r3, #34	@ 0x22
 8003e64:	d108      	bne.n	8003e78 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e76:	e082      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e86:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e88:	e079      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e8a:	2140      	movs	r1, #64	@ 0x40
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fd0d 	bl	80048ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003e92:	e074      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05e      	beq.n	8003f5e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d058      	beq.n	8003f5e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003eac:	2101      	movs	r1, #1
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 ffb8 	bl	8004e24 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003eb4:	2110      	movs	r1, #16
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 ff30 	bl	8004d1c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b22      	cmp	r3, #34	@ 0x22
 8003ec6:	d101      	bne.n	8003ecc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003ec8:	4b32      	ldr	r3, [pc, #200]	@ (8003f94 <I2C_Mem_ISR_DMA+0x25c>)
 8003eca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2bff      	cmp	r3, #255	@ 0xff
 8003ed4:	d910      	bls.n	8003ef8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee0:	b299      	uxth	r1, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fee1 	bl	8004cb8 <I2C_TransferConfig>
 8003ef6:	e011      	b.n	8003f1c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f06:	b299      	uxth	r1, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fece 	bl	8004cb8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b22      	cmp	r3, #34	@ 0x22
 8003f38:	d108      	bne.n	8003f4c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f48:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4a:	e018      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f5a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f5c:	e00f      	b.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fa0d 	bl	8004398 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	80002000 	.word	0x80002000
 8003f94:	80002400 	.word	0x80002400

08003f98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <I2C_Slave_ISR_DMA+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0ca      	b.n	8004152 <I2C_Slave_ISR_DMA+0x1ba>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 faa4 	bl	800452c <I2C_ITSlaveCplt>
 8003fe4:	e0b0      	b.n	8004148 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 809a 	beq.w	8004128 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8093 	beq.w	8004128 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0b9b      	lsrs	r3, r3, #14
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0bdb      	lsrs	r3, r3, #15
 8004012:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004016:	2b00      	cmp	r3, #0
 8004018:	d07f      	beq.n	800411a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0bdb      	lsrs	r3, r3, #15
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0b9b      	lsrs	r3, r3, #14
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d128      	bne.n	80040ba <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b28      	cmp	r3, #40	@ 0x28
 8004072:	d108      	bne.n	8004086 <I2C_Slave_ISR_DMA+0xee>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800407a:	d104      	bne.n	8004086 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fbbe 	bl	8004800 <I2C_ITListenCplt>
 8004084:	e048      	b.n	8004118 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b29      	cmp	r3, #41	@ 0x29
 8004090:	d10e      	bne.n	80040b0 <I2C_Slave_ISR_DMA+0x118>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004098:	d00a      	beq.n	80040b0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2210      	movs	r2, #16
 80040a0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fd19 	bl	8004ada <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f917 	bl	80042dc <I2C_ITSlaveSeqCplt>
 80040ae:	e033      	b.n	8004118 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80040b8:	e034      	b.n	8004124 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2210      	movs	r2, #16
 80040c0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <I2C_Slave_ISR_DMA+0x14c>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040e2:	d11f      	bne.n	8004124 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b21      	cmp	r3, #33	@ 0x21
 80040e8:	d002      	beq.n	80040f0 <I2C_Slave_ISR_DMA+0x158>
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b29      	cmp	r3, #41	@ 0x29
 80040ee:	d103      	bne.n	80040f8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2221      	movs	r2, #33	@ 0x21
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f6:	e008      	b.n	800410a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b22      	cmp	r3, #34	@ 0x22
 80040fc:	d002      	beq.n	8004104 <I2C_Slave_ISR_DMA+0x16c>
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b2a      	cmp	r3, #42	@ 0x2a
 8004102:	d102      	bne.n	800410a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	@ 0x22
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	4619      	mov	r1, r3
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fbcb 	bl	80048ac <I2C_ITError>
      if (treatdmanack == 1U)
 8004116:	e005      	b.n	8004124 <I2C_Slave_ISR_DMA+0x18c>
 8004118:	e004      	b.n	8004124 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2210      	movs	r2, #16
 8004120:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004122:	e011      	b.n	8004148 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004124:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004126:	e00f      	b.n	8004148 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	08db      	lsrs	r3, r3, #3
 8004138:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f809 	bl	800415a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004170:	2b28      	cmp	r3, #40	@ 0x28
 8004172:	d16a      	bne.n	800424a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	b29b      	uxth	r3, r3
 800418e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004192:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80041ae:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d138      	bne.n	800422a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80041b8:	897b      	ldrh	r3, [r7, #10]
 80041ba:	09db      	lsrs	r3, r3, #7
 80041bc:	b29a      	uxth	r2, r3
 80041be:	89bb      	ldrh	r3, [r7, #12]
 80041c0:	4053      	eors	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f003 0306 	and.w	r3, r3, #6
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11c      	bne.n	8004206 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80041cc:	897b      	ldrh	r3, [r7, #10]
 80041ce:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d13b      	bne.n	800425a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2208      	movs	r2, #8
 80041ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041f8:	89ba      	ldrh	r2, [r7, #12]
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fa39 	bl	8003676 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004204:	e029      	b.n	800425a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004206:	893b      	ldrh	r3, [r7, #8]
 8004208:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800420a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fe08 	bl	8004e24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800421c:	89ba      	ldrh	r2, [r7, #12]
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fa27 	bl	8003676 <HAL_I2C_AddrCallback>
}
 8004228:	e017      	b.n	800425a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800422a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fdf8 	bl	8004e24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800423c:	89ba      	ldrh	r2, [r7, #12]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fa17 	bl	8003676 <HAL_I2C_AddrCallback>
}
 8004248:	e007      	b.n	800425a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2208      	movs	r2, #8
 8004250:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b21      	cmp	r3, #33	@ 0x21
 800427c:	d115      	bne.n	80042aa <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2211      	movs	r2, #17
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004292:	2101      	movs	r1, #1
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fdc5 	bl	8004e24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc f9c6 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042a8:	e014      	b.n	80042d4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2212      	movs	r2, #18
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042be:	2102      	movs	r1, #2
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fdaf 	bl	8004e24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc f9e2 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	0b9b      	lsrs	r3, r3, #14
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e00d      	b.n	800432e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0bdb      	lsrs	r3, r3, #15
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b29      	cmp	r3, #41	@ 0x29
 8004338:	d112      	bne.n	8004360 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2228      	movs	r2, #40	@ 0x28
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2221      	movs	r2, #33	@ 0x21
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004348:	2101      	movs	r1, #1
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd6a 	bl	8004e24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff f978 	bl	800364e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800435e:	e017      	b.n	8004390 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b2a      	cmp	r3, #42	@ 0x2a
 800436a:	d111      	bne.n	8004390 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2228      	movs	r2, #40	@ 0x28
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2222      	movs	r2, #34	@ 0x22
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800437a:	2102      	movs	r1, #2
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fd51 	bl	8004e24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff f969 	bl	8003662 <HAL_I2C_SlaveRxCpltCallback>
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2220      	movs	r2, #32
 80043ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b21      	cmp	r3, #33	@ 0x21
 80043b8:	d107      	bne.n	80043ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043ba:	2101      	movs	r1, #1
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fd31 	bl	8004e24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2211      	movs	r2, #17
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c8:	e00c      	b.n	80043e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b22      	cmp	r3, #34	@ 0x22
 80043d4:	d106      	bne.n	80043e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043d6:	2102      	movs	r1, #2
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fd23 	bl	8004e24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2212      	movs	r2, #18
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004524 <I2C_ITMasterCplt+0x18c>)
 80043f0:	400b      	ands	r3, r1
 80043f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004528 <I2C_ITMasterCplt+0x190>)
 80043fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2210      	movs	r2, #16
 8004412:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b60      	cmp	r3, #96	@ 0x60
 800442a:	d10b      	bne.n	8004444 <I2C_ITMasterCplt+0xac>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	b2db      	uxtb	r3, r3
 8004440:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004442:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fb48 	bl	8004ada <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b60      	cmp	r3, #96	@ 0x60
 800445a:	d002      	beq.n	8004462 <I2C_ITMasterCplt+0xca>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa1f 	bl	80048ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800446e:	e054      	b.n	800451a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b21      	cmp	r3, #33	@ 0x21
 800447a:	d124      	bne.n	80044c6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d10b      	bne.n	80044ae <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff f8fd 	bl	80036a6 <HAL_I2C_MemTxCpltCallback>
}
 80044ac:	e035      	b.n	800451a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc f8b8 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 80044c4:	e029      	b.n	800451a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b22      	cmp	r3, #34	@ 0x22
 80044d0:	d123      	bne.n	800451a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d10b      	bne.n	8004504 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff f8dc 	bl	80036ba <HAL_I2C_MemRxCpltCallback>
}
 8004502:	e00a      	b.n	800451a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc f8bf 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	fe00e800 	.word	0xfe00e800
 8004528:	ffff0000 	.word	0xffff0000

0800452c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2220      	movs	r2, #32
 8004556:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	2b21      	cmp	r3, #33	@ 0x21
 800455c:	d002      	beq.n	8004564 <I2C_ITSlaveCplt+0x38>
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	2b29      	cmp	r3, #41	@ 0x29
 8004562:	d108      	bne.n	8004576 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004564:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fc5b 	bl	8004e24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2221      	movs	r2, #33	@ 0x21
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
 8004574:	e019      	b.n	80045aa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	2b22      	cmp	r3, #34	@ 0x22
 800457a:	d002      	beq.n	8004582 <I2C_ITSlaveCplt+0x56>
 800457c:	7afb      	ldrb	r3, [r7, #11]
 800457e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004580:	d108      	bne.n	8004594 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004582:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fc4c 	bl	8004e24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2222      	movs	r2, #34	@ 0x22
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
 8004592:	e00a      	b.n	80045aa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	2b28      	cmp	r3, #40	@ 0x28
 8004598:	d107      	bne.n	80045aa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800459a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fc40 	bl	8004e24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b8c      	ldr	r3, [pc, #560]	@ (80047f8 <I2C_ITSlaveCplt+0x2cc>)
 80045c6:	400b      	ands	r3, r1
 80045c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa85 	bl	8004ada <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	0b9b      	lsrs	r3, r3, #14
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004602:	e018      	b.n	8004636 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	0bdb      	lsrs	r3, r3, #15
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800461e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d04a      	beq.n	800473c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d044      	beq.n	800473c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d128      	bne.n	800470e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b28      	cmp	r3, #40	@ 0x28
 80046c6:	d108      	bne.n	80046da <I2C_ITSlaveCplt+0x1ae>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ce:	d104      	bne.n	80046da <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046d0:	6979      	ldr	r1, [r7, #20]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f894 	bl	8004800 <I2C_ITListenCplt>
 80046d8:	e030      	b.n	800473c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b29      	cmp	r3, #41	@ 0x29
 80046e4:	d10e      	bne.n	8004704 <I2C_ITSlaveCplt+0x1d8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ec:	d00a      	beq.n	8004704 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2210      	movs	r2, #16
 80046f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9ef 	bl	8004ada <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fded 	bl	80042dc <I2C_ITSlaveSeqCplt>
 8004702:	e01b      	b.n	800473c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2210      	movs	r2, #16
 800470a:	61da      	str	r2, [r3, #28]
 800470c:	e016      	b.n	800473c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2210      	movs	r2, #16
 8004714:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <I2C_ITSlaveCplt+0x204>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800472e:	d105      	bne.n	800473c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8b8 	bl	80048ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8a7 	bl	80048ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b28      	cmp	r3, #40	@ 0x28
 8004768:	d141      	bne.n	80047ee <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f847 	bl	8004800 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004772:	e03c      	b.n	80047ee <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800477c:	d014      	beq.n	80047a8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fdac 	bl	80042dc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1d      	ldr	r2, [pc, #116]	@ (80047fc <I2C_ITSlaveCplt+0x2d0>)
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fe ff76 	bl	8003692 <HAL_I2C_ListenCpltCallback>
}
 80047a6:	e022      	b.n	80047ee <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b22      	cmp	r3, #34	@ 0x22
 80047b2:	d10e      	bne.n	80047d2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe ff49 	bl	8003662 <HAL_I2C_SlaveRxCpltCallback>
}
 80047d0:	e00d      	b.n	80047ee <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fe ff30 	bl	800364e <HAL_I2C_SlaveTxCpltCallback>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	fe00e800 	.word	0xfe00e800
 80047fc:	ffff0000 	.word	0xffff0000

08004800 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <I2C_ITListenCplt+0xa8>)
 800480e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d022      	beq.n	800487e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d012      	beq.n	800487e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800487e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 face 	bl	8004e24 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fe fefa 	bl	8003692 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	ffff0000 	.word	0xffff0000

080048ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a6d      	ldr	r2, [pc, #436]	@ (8004a80 <I2C_ITError+0x1d4>)
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b28      	cmp	r3, #40	@ 0x28
 80048e2:	d005      	beq.n	80048f0 <I2C_ITError+0x44>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b29      	cmp	r3, #41	@ 0x29
 80048e8:	d002      	beq.n	80048f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ee:	d10b      	bne.n	8004908 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048f0:	2103      	movs	r1, #3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa96 	bl	8004e24 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2228      	movs	r2, #40	@ 0x28
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a60      	ldr	r2, [pc, #384]	@ (8004a84 <I2C_ITError+0x1d8>)
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
 8004906:	e030      	b.n	800496a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004908:	f248 0103 	movw	r1, #32771	@ 0x8003
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa89 	bl	8004e24 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8e1 	bl	8004ada <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b60      	cmp	r3, #96	@ 0x60
 8004922:	d01f      	beq.n	8004964 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d114      	bne.n	8004964 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b10      	cmp	r3, #16
 8004946:	d109      	bne.n	800495c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2210      	movs	r2, #16
 800494e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	f043 0204 	orr.w	r2, r3, #4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2220      	movs	r2, #32
 8004962:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d039      	beq.n	80049ec <I2C_ITError+0x140>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b11      	cmp	r3, #17
 800497c:	d002      	beq.n	8004984 <I2C_ITError+0xd8>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b21      	cmp	r3, #33	@ 0x21
 8004982:	d133      	bne.n	80049ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800498e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004992:	d107      	bne.n	80049a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd ffb9 	bl	8002920 <HAL_DMA_GetState>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d017      	beq.n	80049e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	4a33      	ldr	r2, [pc, #204]	@ (8004a88 <I2C_ITError+0x1dc>)
 80049ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fe93 	bl	80026f4 <HAL_DMA_Abort_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d04d      	beq.n	8004a70 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049de:	4610      	mov	r0, r2
 80049e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049e2:	e045      	b.n	8004a70 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f851 	bl	8004a8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049ea:	e041      	b.n	8004a70 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d039      	beq.n	8004a68 <I2C_ITError+0x1bc>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b12      	cmp	r3, #18
 80049f8:	d002      	beq.n	8004a00 <I2C_ITError+0x154>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b22      	cmp	r3, #34	@ 0x22
 80049fe:	d133      	bne.n	8004a68 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0e:	d107      	bne.n	8004a20 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd ff7b 	bl	8002920 <HAL_DMA_GetState>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d017      	beq.n	8004a60 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <I2C_ITError+0x1dc>)
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd fe55 	bl	80026f4 <HAL_DMA_Abort_IT>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a5e:	e009      	b.n	8004a74 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f813 	bl	8004a8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a66:	e005      	b.n	8004a74 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f80f 	bl	8004a8c <I2C_TreatErrorCallback>
  }
}
 8004a6e:	e002      	b.n	8004a76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a70:	bf00      	nop
 8004a72:	e000      	b.n	8004a76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a74:	bf00      	nop
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	ffff0000 	.word	0xffff0000
 8004a84:	0800394b 	.word	0x0800394b
 8004a88:	08004c7d 	.word	0x08004c7d

08004a8c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b60      	cmp	r3, #96	@ 0x60
 8004a9e:	d10e      	bne.n	8004abe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe fe09 	bl	80036ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004abc:	e009      	b.n	8004ad2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fb ff6f 	bl	80009b0 <HAL_I2C_ErrorCallback>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d103      	bne.n	8004af8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2200      	movs	r2, #0
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d007      	beq.n	8004b16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	619a      	str	r2, [r3, #24]
  }
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b3e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f8e5 	bl	8004d1c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004b52:	e02d      	b.n	8004bb0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004b5c:	441a      	add	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2bff      	cmp	r3, #255	@ 0xff
 8004b6a:	d903      	bls.n	8004b74 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	22ff      	movs	r2, #255	@ 0xff
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004b72:	e004      	b.n	8004b7e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	4619      	mov	r1, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3328      	adds	r3, #40	@ 0x28
 8004b8e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004b94:	f7fd fcda 	bl	800254c <HAL_DMA_Start_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff fe83 	bl	80048ac <I2C_ITError>
}
 8004ba6:	e003      	b.n	8004bb0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004ba8:	2140      	movs	r1, #64	@ 0x40
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f8b6 	bl	8004d1c <I2C_Enable_IRQ>
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bd4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004be0:	2120      	movs	r1, #32
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f89a 	bl	8004d1c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004be8:	e02d      	b.n	8004c46 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004bf2:	441a      	add	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2bff      	cmp	r3, #255	@ 0xff
 8004c00:	d903      	bls.n	8004c0a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22ff      	movs	r2, #255	@ 0xff
 8004c06:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c08:	e004      	b.n	8004c14 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3324      	adds	r3, #36	@ 0x24
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c2a:	f7fd fc8f 	bl	800254c <HAL_DMA_Start_IT>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c34:	2110      	movs	r1, #16
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fe38 	bl	80048ac <I2C_ITError>
}
 8004c3c:	e003      	b.n	8004c46 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c3e:	2140      	movs	r1, #64	@ 0x40
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f86b 	bl	8004d1c <I2C_Enable_IRQ>
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fe1c 	bl	80048ac <I2C_ITError>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c96:	2200      	movs	r2, #0
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff feee 	bl	8004a8c <I2C_TreatErrorCallback>
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cca:	897b      	ldrh	r3, [r7, #10]
 8004ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cd0:	7a7b      	ldrb	r3, [r7, #9]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ce6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	0d5b      	lsrs	r3, r3, #21
 8004cf2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cf6:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <I2C_TransferConfig+0x60>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	ea02 0103 	and.w	r1, r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	03ff63ff 	.word	0x03ff63ff

08004d1c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d30:	4a39      	ldr	r2, [pc, #228]	@ (8004e18 <I2C_Enable_IRQ+0xfc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d032      	beq.n	8004d9c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004d3a:	4a38      	ldr	r2, [pc, #224]	@ (8004e1c <I2C_Enable_IRQ+0x100>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02d      	beq.n	8004d9c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004d44:	4a36      	ldr	r2, [pc, #216]	@ (8004e20 <I2C_Enable_IRQ+0x104>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d028      	beq.n	8004d9c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da03      	bge.n	8004d5a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d5a:	887b      	ldrh	r3, [r7, #2]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004d6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004d7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d7e:	887b      	ldrh	r3, [r7, #2]
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d103      	bne.n	8004d8c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004d8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d8c:	887b      	ldrh	r3, [r7, #2]
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d133      	bne.n	8004dfa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f043 0320 	orr.w	r3, r3, #32
 8004d98:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d9a:	e02e      	b.n	8004dfa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da03      	bge.n	8004dac <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004daa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004dbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004dce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d103      	bne.n	8004dde <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ddc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d103      	bne.n	8004dec <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004dea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d103      	bne.n	8004dfa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	08003b53 	.word	0x08003b53
 8004e1c:	08003f99 	.word	0x08003f99
 8004e20:	08003d39 	.word	0x08003d39

08004e24 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00f      	beq.n	8004e5e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004e44:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e52:	2b28      	cmp	r3, #40	@ 0x28
 8004e54:	d003      	beq.n	8004e5e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00f      	beq.n	8004e88 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004e6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e7c:	2b28      	cmp	r3, #40	@ 0x28
 8004e7e:	d003      	beq.n	8004e88 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e86:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da03      	bge.n	8004e98 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d103      	bne.n	8004ea6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d103      	bne.n	8004eb4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d103      	bne.n	8004ec2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d138      	bne.n	8004f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e032      	b.n	8004f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2224      	movs	r2, #36	@ 0x24
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d139      	bne.n	8005000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e033      	b.n	8005002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2224      	movs	r2, #36	@ 0x24
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d141      	bne.n	80050a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800501e:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502a:	d131      	bne.n	8005090 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800502c:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005032:	4a46      	ldr	r2, [pc, #280]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800503c:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005044:	4a41      	ldr	r2, [pc, #260]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800504a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800504c:	4b40      	ldr	r3, [pc, #256]	@ (8005150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2232      	movs	r2, #50	@ 0x32
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	4a3f      	ldr	r2, [pc, #252]	@ (8005154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	0c9b      	lsrs	r3, r3, #18
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005062:	e002      	b.n	800506a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3b01      	subs	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506a:	4b38      	ldr	r3, [pc, #224]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005076:	d102      	bne.n	800507e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f2      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800507e:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d158      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e057      	b.n	8005140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005090:	4b2e      	ldr	r3, [pc, #184]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005096:	4a2d      	ldr	r2, [pc, #180]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800509c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050a0:	e04d      	b.n	800513e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a8:	d141      	bne.n	800512e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050aa:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b6:	d131      	bne.n	800511c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b8:	4b24      	ldr	r3, [pc, #144]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050be:	4a23      	ldr	r2, [pc, #140]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050c8:	4b20      	ldr	r3, [pc, #128]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050d0:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2232      	movs	r2, #50	@ 0x32
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	0c9b      	lsrs	r3, r3, #18
 80050ea:	3301      	adds	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ee:	e002      	b.n	80050f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050f6:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005102:	d102      	bne.n	800510a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f2      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800510a:	4b10      	ldr	r3, [pc, #64]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005116:	d112      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e011      	b.n	8005140 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800511c:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800512c:	e007      	b.n	800513e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005136:	4a05      	ldr	r2, [pc, #20]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800513c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40007000 	.word	0x40007000
 8005150:	20000070 	.word	0x20000070
 8005154:	431bde83 	.word	0x431bde83

08005158 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005166:	6093      	str	r3, [r2, #8]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40007000 	.word	0x40007000

08005178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e2fe      	b.n	8005788 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d075      	beq.n	8005282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005196:	4b97      	ldr	r3, [pc, #604]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a0:	4b94      	ldr	r3, [pc, #592]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d102      	bne.n	80051b6 <HAL_RCC_OscConfig+0x3e>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_OscConfig+0x44>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d10b      	bne.n	80051d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	4b8d      	ldr	r3, [pc, #564]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d05b      	beq.n	8005280 <HAL_RCC_OscConfig+0x108>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d157      	bne.n	8005280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e2d9      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051dc:	d106      	bne.n	80051ec <HAL_RCC_OscConfig+0x74>
 80051de:	4b85      	ldr	r3, [pc, #532]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e01d      	b.n	8005228 <HAL_RCC_OscConfig+0xb0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051f4:	d10c      	bne.n	8005210 <HAL_RCC_OscConfig+0x98>
 80051f6:	4b7f      	ldr	r3, [pc, #508]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a7e      	ldr	r2, [pc, #504]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b7c      	ldr	r3, [pc, #496]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7b      	ldr	r2, [pc, #492]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e00b      	b.n	8005228 <HAL_RCC_OscConfig+0xb0>
 8005210:	4b78      	ldr	r3, [pc, #480]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a77      	ldr	r2, [pc, #476]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b75      	ldr	r3, [pc, #468]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a74      	ldr	r2, [pc, #464]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fc fcf8 	bl	8001c24 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005238:	f7fc fcf4 	bl	8001c24 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	@ 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e29e      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800524a:	4b6a      	ldr	r3, [pc, #424]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0xc0>
 8005256:	e014      	b.n	8005282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fce4 	bl	8001c24 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005260:	f7fc fce0 	bl	8001c24 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	@ 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e28a      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005272:	4b60      	ldr	r3, [pc, #384]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0xe8>
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528e:	4b59      	ldr	r3, [pc, #356]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005298:	4b56      	ldr	r3, [pc, #344]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d102      	bne.n	80052ae <HAL_RCC_OscConfig+0x136>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_OscConfig+0x13c>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d11f      	bne.n	80052f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b4:	4b4f      	ldr	r3, [pc, #316]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_OscConfig+0x154>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e25d      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052cc:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	4946      	ldr	r1, [pc, #280]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052e0:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <HAL_RCC_OscConfig+0x280>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fc fc51 	bl	8001b8c <HAL_InitTick>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d043      	beq.n	8005378 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e249      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d023      	beq.n	8005344 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052fc:	4b3d      	ldr	r3, [pc, #244]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3c      	ldr	r2, [pc, #240]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc fc8c 	bl	8001c24 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005310:	f7fc fc88 	bl	8001c24 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e232      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005322:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532e:	4b31      	ldr	r3, [pc, #196]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	492d      	ldr	r1, [pc, #180]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]
 8005342:	e01a      	b.n	800537a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005344:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2a      	ldr	r2, [pc, #168]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800534a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800534e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fc fc68 	bl	8001c24 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005358:	f7fc fc64 	bl	8001c24 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e20e      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800536a:	4b22      	ldr	r3, [pc, #136]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x1e0>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d041      	beq.n	800540a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01c      	beq.n	80053c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005394:	4a17      	ldr	r2, [pc, #92]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fc fc41 	bl	8001c24 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a6:	f7fc fc3d 	bl	8001c24 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e1e7      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b8:	4b0e      	ldr	r3, [pc, #56]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0ef      	beq.n	80053a6 <HAL_RCC_OscConfig+0x22e>
 80053c6:	e020      	b.n	800540a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ce:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fc fc24 	bl	8001c24 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053de:	e00d      	b.n	80053fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e0:	f7fc fc20 	bl	8001c24 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d906      	bls.n	80053fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e1ca      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	20000074 	.word	0x20000074
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ea      	bne.n	80053e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a6 	beq.w	8005564 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005418:	2300      	movs	r3, #0
 800541a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800541c:	4b84      	ldr	r3, [pc, #528]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_OscConfig+0x2b4>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x2b6>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005432:	4b7f      	ldr	r3, [pc, #508]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	4a7e      	ldr	r2, [pc, #504]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543c:	6593      	str	r3, [r2, #88]	@ 0x58
 800543e:	4b7c      	ldr	r3, [pc, #496]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800544a:	2301      	movs	r3, #1
 800544c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800544e:	4b79      	ldr	r3, [pc, #484]	@ (8005634 <HAL_RCC_OscConfig+0x4bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d118      	bne.n	800548c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545a:	4b76      	ldr	r3, [pc, #472]	@ (8005634 <HAL_RCC_OscConfig+0x4bc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a75      	ldr	r2, [pc, #468]	@ (8005634 <HAL_RCC_OscConfig+0x4bc>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005466:	f7fc fbdd 	bl	8001c24 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546e:	f7fc fbd9 	bl	8001c24 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e183      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005480:	4b6c      	ldr	r3, [pc, #432]	@ (8005634 <HAL_RCC_OscConfig+0x4bc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d108      	bne.n	80054a6 <HAL_RCC_OscConfig+0x32e>
 8005494:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a4:	e024      	b.n	80054f0 <HAL_RCC_OscConfig+0x378>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d110      	bne.n	80054d0 <HAL_RCC_OscConfig+0x358>
 80054ae:	4b60      	ldr	r3, [pc, #384]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054be:	4b5c      	ldr	r3, [pc, #368]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ce:	e00f      	b.n	80054f0 <HAL_RCC_OscConfig+0x378>
 80054d0:	4b57      	ldr	r3, [pc, #348]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	4a56      	ldr	r2, [pc, #344]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	4a52      	ldr	r2, [pc, #328]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fc fb94 	bl	8001c24 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fc fb90 	bl	8001c24 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e138      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	4b46      	ldr	r3, [pc, #280]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ed      	beq.n	8005500 <HAL_RCC_OscConfig+0x388>
 8005524:	e015      	b.n	8005552 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fc fb7d 	bl	8001c24 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fc fb79 	bl	8001c24 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e121      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005544:	4b3a      	ldr	r3, [pc, #232]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1ed      	bne.n	800552e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b35      	ldr	r3, [pc, #212]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	4a34      	ldr	r2, [pc, #208]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005562:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03c      	beq.n	80055ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01c      	beq.n	80055b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005578:	4b2d      	ldr	r3, [pc, #180]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800557a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557e:	4a2c      	ldr	r2, [pc, #176]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fc fb4c 	bl	8001c24 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005590:	f7fc fb48 	bl	8001c24 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0f2      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055a2:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80055a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0ef      	beq.n	8005590 <HAL_RCC_OscConfig+0x418>
 80055b0:	e01b      	b.n	80055ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80055b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fc fb2f 	bl	8001c24 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ca:	f7fc fb2b 	bl	8001c24 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0d5      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055dc:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ef      	bne.n	80055ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80c9 	beq.w	8005786 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	f000 8083 	beq.w	8005708 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d15e      	bne.n	80056c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a08      	ldr	r2, [pc, #32]	@ (8005630 <HAL_RCC_OscConfig+0x4b8>)
 8005610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fc fb05 	bl	8001c24 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800561c:	e00c      	b.n	8005638 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561e:	f7fc fb01 	bl	8001c24 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d905      	bls.n	8005638 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e0ab      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
 8005630:	40021000 	.word	0x40021000
 8005634:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005638:	4b55      	ldr	r3, [pc, #340]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ec      	bne.n	800561e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005644:	4b52      	ldr	r3, [pc, #328]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	4b52      	ldr	r3, [pc, #328]	@ (8005794 <HAL_RCC_OscConfig+0x61c>)
 800564a:	4013      	ands	r3, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6a11      	ldr	r1, [r2, #32]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005654:	3a01      	subs	r2, #1
 8005656:	0112      	lsls	r2, r2, #4
 8005658:	4311      	orrs	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800565e:	0212      	lsls	r2, r2, #8
 8005660:	4311      	orrs	r1, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005666:	0852      	lsrs	r2, r2, #1
 8005668:	3a01      	subs	r2, #1
 800566a:	0552      	lsls	r2, r2, #21
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005672:	0852      	lsrs	r2, r2, #1
 8005674:	3a01      	subs	r2, #1
 8005676:	0652      	lsls	r2, r2, #25
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800567e:	06d2      	lsls	r2, r2, #27
 8005680:	430a      	orrs	r2, r1
 8005682:	4943      	ldr	r1, [pc, #268]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 8005684:	4313      	orrs	r3, r2
 8005686:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005688:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a40      	ldr	r2, [pc, #256]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 800568e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005692:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005694:	4b3e      	ldr	r3, [pc, #248]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a3d      	ldr	r2, [pc, #244]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fc fac0 	bl	8001c24 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fc fabc 	bl	8001c24 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e066      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ba:	4b35      	ldr	r3, [pc, #212]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x530>
 80056c6:	e05e      	b.n	8005786 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c8:	4b31      	ldr	r3, [pc, #196]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a30      	ldr	r2, [pc, #192]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 80056ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fc faa6 	bl	8001c24 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fc faa2 	bl	8001c24 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e04c      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ee:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056fa:	4b25      	ldr	r3, [pc, #148]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	4924      	ldr	r1, [pc, #144]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 8005700:	4b25      	ldr	r3, [pc, #148]	@ (8005798 <HAL_RCC_OscConfig+0x620>)
 8005702:	4013      	ands	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
 8005706:	e03e      	b.n	8005786 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e039      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005714:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <HAL_RCC_OscConfig+0x618>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0203 	and.w	r2, r3, #3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	429a      	cmp	r2, r3
 8005726:	d12c      	bne.n	8005782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	3b01      	subs	r3, #1
 8005734:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d123      	bne.n	8005782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d11b      	bne.n	8005782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d113      	bne.n	8005782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	3b01      	subs	r3, #1
 8005768:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d109      	bne.n	8005782 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	3b01      	subs	r3, #1
 800577c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	019f800c 	.word	0x019f800c
 8005798:	feeefffc 	.word	0xfeeefffc

0800579c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e11e      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057b4:	4b91      	ldr	r3, [pc, #580]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d910      	bls.n	80057e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c2:	4b8e      	ldr	r3, [pc, #568]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 020f 	bic.w	r2, r3, #15
 80057ca:	498c      	ldr	r1, [pc, #560]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	4b8a      	ldr	r3, [pc, #552]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e106      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d073      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d129      	bne.n	800584c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f8:	4b81      	ldr	r3, [pc, #516]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0f4      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005808:	f000 f99e 	bl	8005b48 <RCC_GetSysClockFreqFromPLLSource>
 800580c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4a7c      	ldr	r2, [pc, #496]	@ (8005a04 <HAL_RCC_ClockConfig+0x268>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d93f      	bls.n	8005896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005816:	4b7a      	ldr	r3, [pc, #488]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d033      	beq.n	8005896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005832:	2b00      	cmp	r3, #0
 8005834:	d12f      	bne.n	8005896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005836:	4b72      	ldr	r3, [pc, #456]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583e:	4a70      	ldr	r2, [pc, #448]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e024      	b.n	8005896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d107      	bne.n	8005864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005854:	4b6a      	ldr	r3, [pc, #424]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0c6      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005864:	4b66      	ldr	r3, [pc, #408]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0be      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005874:	f000 f8ce 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8005878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4a61      	ldr	r2, [pc, #388]	@ (8005a04 <HAL_RCC_ClockConfig+0x268>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d909      	bls.n	8005896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005882:	4b5f      	ldr	r3, [pc, #380]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800588a:	4a5d      	ldr	r2, [pc, #372]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 800588c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005896:	4b5a      	ldr	r3, [pc, #360]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 0203 	bic.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4957      	ldr	r1, [pc, #348]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a8:	f7fc f9bc 	bl	8001c24 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7fc f9b8 	bl	8001c24 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e095      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 020c 	and.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1eb      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d023      	beq.n	800592c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058f0:	4b43      	ldr	r3, [pc, #268]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a42      	ldr	r2, [pc, #264]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80058f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005908:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005910:	4a3b      	ldr	r2, [pc, #236]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005918:	4b39      	ldr	r3, [pc, #228]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4936      	ldr	r1, [pc, #216]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	e008      	b.n	800593e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b80      	cmp	r3, #128	@ 0x80
 8005930:	d105      	bne.n	800593e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005932:	4b33      	ldr	r3, [pc, #204]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4a32      	ldr	r2, [pc, #200]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800593c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d21d      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594c:	4b2b      	ldr	r3, [pc, #172]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 020f 	bic.w	r2, r3, #15
 8005954:	4929      	ldr	r1, [pc, #164]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800595c:	f7fc f962 	bl	8001c24 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	e00a      	b.n	800597a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005964:	f7fc f95e 	bl	8001c24 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e03b      	b.n	80059f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	@ (80059fc <HAL_RCC_ClockConfig+0x260>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d1ed      	bne.n	8005964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005994:	4b1a      	ldr	r3, [pc, #104]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4917      	ldr	r1, [pc, #92]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b2:	4b13      	ldr	r3, [pc, #76]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	490f      	ldr	r1, [pc, #60]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059c6:	f000 f825 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 80059ca:	4602      	mov	r2, r0
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	490c      	ldr	r1, [pc, #48]	@ (8005a08 <HAL_RCC_ClockConfig+0x26c>)
 80059d8:	5ccb      	ldrb	r3, [r1, r3]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a0c <HAL_RCC_ClockConfig+0x270>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <HAL_RCC_ClockConfig+0x274>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc f8ce 	bl	8001b8c <HAL_InitTick>
 80059f0:	4603      	mov	r3, r0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40022000 	.word	0x40022000
 8005a00:	40021000 	.word	0x40021000
 8005a04:	04c4b400 	.word	0x04c4b400
 8005a08:	08007bb0 	.word	0x08007bb0
 8005a0c:	20000070 	.word	0x20000070
 8005a10:	20000074 	.word	0x20000074

08005a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d102      	bne.n	8005a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a26:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e047      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a2c:	4b27      	ldr	r3, [pc, #156]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 030c 	and.w	r3, r3, #12
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d102      	bne.n	8005a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a38:	4b26      	ldr	r3, [pc, #152]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e03e      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a3e:	4b23      	ldr	r3, [pc, #140]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d136      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a4a:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a54:	4b1d      	ldr	r3, [pc, #116]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d10c      	bne.n	8005a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a72:	68d2      	ldr	r2, [r2, #12]
 8005a74:	0a12      	lsrs	r2, r2, #8
 8005a76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	617b      	str	r3, [r7, #20]
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a82:	4a13      	ldr	r2, [pc, #76]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	4a10      	ldr	r2, [pc, #64]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8c:	68d2      	ldr	r2, [r2, #12]
 8005a8e:	0a12      	lsrs	r2, r2, #8
 8005a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
      break;
 8005a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	0e5b      	lsrs	r3, r3, #25
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e001      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005abc:	693b      	ldr	r3, [r7, #16]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	00f42400 	.word	0x00f42400
 8005ad4:	007a1200 	.word	0x007a1200

08005ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005adc:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <HAL_RCC_GetHCLKFreq+0x14>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000070 	.word	0x20000070

08005af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005af4:	f7ff fff0 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	08007bc0 	.word	0x08007bc0

08005b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b20:	f7ff ffda 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0adb      	lsrs	r3, r3, #11
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4904      	ldr	r1, [pc, #16]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	08007bc0 	.word	0x08007bc0

08005b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b58:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d10c      	bne.n	8005b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b6c:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b76:	68d2      	ldr	r2, [r2, #12]
 8005b78:	0a12      	lsrs	r2, r2, #8
 8005b7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	617b      	str	r3, [r7, #20]
    break;
 8005b84:	e00c      	b.n	8005ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b86:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	0a12      	lsrs	r2, r2, #8
 8005b94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
    break;
 8005b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ba0:	4b09      	ldr	r3, [pc, #36]	@ (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	0e5b      	lsrs	r3, r3, #25
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	3301      	adds	r3, #1
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bba:	687b      	ldr	r3, [r7, #4]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	007a1200 	.word	0x007a1200
 8005bd0:	00f42400 	.word	0x00f42400

08005bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bdc:	2300      	movs	r3, #0
 8005bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005be0:	2300      	movs	r3, #0
 8005be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8098 	beq.w	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf6:	4b43      	ldr	r3, [pc, #268]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10d      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	4b40      	ldr	r3, [pc, #256]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c06:	4a3f      	ldr	r2, [pc, #252]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a39      	ldr	r2, [pc, #228]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c2a:	f7fb fffb 	bl	8001c24 <HAL_GetTick>
 8005c2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c30:	e009      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c32:	f7fb fff7 	bl	8001c24 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d902      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	74fb      	strb	r3, [r7, #19]
        break;
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c46:	4b30      	ldr	r3, [pc, #192]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0ef      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d159      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c58:	4b2a      	ldr	r3, [pc, #168]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01e      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d019      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c74:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c80:	4b20      	ldr	r3, [pc, #128]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	4a1f      	ldr	r2, [pc, #124]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c90:	4b1c      	ldr	r3, [pc, #112]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca0:	4a18      	ldr	r2, [pc, #96]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fb ffb7 	bl	8001c24 <HAL_GetTick>
 8005cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb8:	e00b      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cba:	f7fb ffb3 	bl	8001c24 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d902      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	74fb      	strb	r3, [r7, #19]
            break;
 8005cd0:	e006      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ec      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf4:	4903      	ldr	r1, [pc, #12]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cfc:	e008      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cfe:	7cfb      	ldrb	r3, [r7, #19]
 8005d00:	74bb      	strb	r3, [r7, #18]
 8005d02:	e005      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d10:	7c7b      	ldrb	r3, [r7, #17]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d16:	4ba6      	ldr	r3, [pc, #664]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1a:	4aa5      	ldr	r2, [pc, #660]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d34:	f023 0203 	bic.w	r2, r3, #3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	499c      	ldr	r1, [pc, #624]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d50:	4b97      	ldr	r3, [pc, #604]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d56:	f023 020c 	bic.w	r2, r3, #12
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4994      	ldr	r1, [pc, #592]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d72:	4b8f      	ldr	r3, [pc, #572]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	498b      	ldr	r1, [pc, #556]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d94:	4b86      	ldr	r3, [pc, #536]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	4983      	ldr	r1, [pc, #524]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	497a      	ldr	r1, [pc, #488]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dd8:	4b75      	ldr	r3, [pc, #468]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	4972      	ldr	r1, [pc, #456]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4969      	ldr	r1, [pc, #420]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e1c:	4b64      	ldr	r3, [pc, #400]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4961      	ldr	r1, [pc, #388]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	4958      	ldr	r1, [pc, #352]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d015      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e60:	4b53      	ldr	r3, [pc, #332]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	4950      	ldr	r1, [pc, #320]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e80:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e98:	4b45      	ldr	r3, [pc, #276]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	4942      	ldr	r1, [pc, #264]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ede:	4934      	ldr	r1, [pc, #208]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eee:	d105      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005efa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f08:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f16:	4926      	ldr	r1, [pc, #152]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f26:	d105      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f28:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d015      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f40:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	4918      	ldr	r1, [pc, #96]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f60:	4b13      	ldr	r3, [pc, #76]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f78:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f86:	490a      	ldr	r1, [pc, #40]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000

08005fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e042      	b.n	800604c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fb fad5 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2224      	movs	r2, #36	@ 0x24
 8005fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 ffcc 	bl	8006f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fcfd 	bl	8006a04 <UART_SetConfig>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e01b      	b.n	800604c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f84b 	bl	80070e0 <UART_CheckIdleState>
 800604a:	4603      	mov	r3, r0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006068:	2b20      	cmp	r3, #32
 800606a:	d167      	bne.n	800613c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_UART_Transmit_DMA+0x24>
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e060      	b.n	800613e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	88fa      	ldrh	r2, [r7, #6]
 800608e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2221      	movs	r2, #33	@ 0x21
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d028      	beq.n	80060fc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ae:	4a26      	ldr	r2, [pc, #152]	@ (8006148 <HAL_UART_Transmit_DMA+0xf4>)
 80060b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b6:	4a25      	ldr	r2, [pc, #148]	@ (800614c <HAL_UART_Transmit_DMA+0xf8>)
 80060b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060be:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <HAL_UART_Transmit_DMA+0xfc>)
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c6:	2200      	movs	r2, #0
 80060c8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d2:	4619      	mov	r1, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3328      	adds	r3, #40	@ 0x28
 80060da:	461a      	mov	r2, r3
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	f7fc fa35 	bl	800254c <HAL_DMA_Start_IT>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d009      	beq.n	80060fc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2210      	movs	r2, #16
 80060ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e020      	b.n	800613e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2240      	movs	r2, #64	@ 0x40
 8006102:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	613b      	str	r3, [r7, #16]
   return(result);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006124:	623a      	str	r2, [r7, #32]
 8006126:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	61bb      	str	r3, [r7, #24]
   return(result);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	4618      	mov	r0, r3
 8006140:	3728      	adds	r7, #40	@ 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	080075ab 	.word	0x080075ab
 800614c:	08007645 	.word	0x08007645
 8006150:	080077cb 	.word	0x080077cb

08006154 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	@ 0x28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006168:	2b20      	cmp	r3, #32
 800616a:	d137      	bne.n	80061dc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UART_Receive_DMA+0x24>
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e030      	b.n	80061de <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <HAL_UART_Receive_DMA+0x94>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01f      	beq.n	80061cc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	613b      	str	r3, [r7, #16]
   return(result);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f001 f89c 	bl	8007310 <UART_Start_Receive_DMA>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	@ 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40008000 	.word	0x40008000

080061ec <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b090      	sub	sp, #64	@ 0x40
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d139      	bne.n	8006286 <HAL_UART_DMAStop+0x9a>
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	2b21      	cmp	r3, #33	@ 0x21
 8006216:	d136      	bne.n	8006286 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3308      	adds	r3, #8
 800621e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	61fb      	str	r3, [r7, #28]
   return(result);
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800623a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800623e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006258:	4618      	mov	r0, r3
 800625a:	f7fc f9f2 	bl	8002642 <HAL_DMA_Abort>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00d      	beq.n	8006280 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006268:	4618      	mov	r0, r3
 800626a:	f7fc fb67 	bl	800293c <HAL_DMA_GetError>
 800626e:	4603      	mov	r3, r0
 8006270:	2b20      	cmp	r3, #32
 8006272:	d105      	bne.n	8006280 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2210      	movs	r2, #16
 8006278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e047      	b.n	8006310 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f8eb 	bl	800745c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b40      	cmp	r3, #64	@ 0x40
 8006292:	d13c      	bne.n	800630e <HAL_UART_DMAStop+0x122>
 8006294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006296:	2b22      	cmp	r3, #34	@ 0x22
 8006298:	d139      	bne.n	800630e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ba:	61ba      	str	r2, [r7, #24]
 80062bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d017      	beq.n	8006308 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc f9af 	bl	8002642 <HAL_DMA_Abort>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fc fb23 	bl	800293c <HAL_DMA_GetError>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d105      	bne.n	8006308 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2210      	movs	r2, #16
 8006300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e003      	b.n	8006310 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f8e8 	bl	80074de <UART_EndRxTransfer>
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3740      	adds	r7, #64	@ 0x40
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b0ba      	sub	sp, #232	@ 0xe8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006342:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006346:	4013      	ands	r3, r2
 8006348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800634c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d11b      	bne.n	800638c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8300 	beq.w	8006982 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
      }
      return;
 800638a:	e2fa      	b.n	8006982 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800638c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8123 	beq.w	80065dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800639a:	4b8d      	ldr	r3, [pc, #564]	@ (80065d0 <HAL_UART_IRQHandler+0x2b8>)
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063a6:	4b8b      	ldr	r3, [pc, #556]	@ (80065d4 <HAL_UART_IRQHandler+0x2bc>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8116 	beq.w	80065dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <HAL_UART_IRQHandler+0xc8>
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2201      	movs	r2, #1
 80063ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	f043 0201 	orr.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d011      	beq.n	8006410 <HAL_UART_IRQHandler+0xf8>
 80063ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2202      	movs	r2, #2
 80063fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006406:	f043 0204 	orr.w	r2, r3, #4
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d011      	beq.n	8006440 <HAL_UART_IRQHandler+0x128>
 800641c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2204      	movs	r2, #4
 800642e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006436:	f043 0202 	orr.w	r2, r3, #2
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d017      	beq.n	800647c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d105      	bne.n	8006464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800645c:	4b5c      	ldr	r3, [pc, #368]	@ (80065d0 <HAL_UART_IRQHandler+0x2b8>)
 800645e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2208      	movs	r2, #8
 800646a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006472:	f043 0208 	orr.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800647c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006484:	2b00      	cmp	r3, #0
 8006486:	d012      	beq.n	80064ae <HAL_UART_IRQHandler+0x196>
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800649c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8266 	beq.w	8006986 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	2b40      	cmp	r3, #64	@ 0x40
 8006504:	d005      	beq.n	8006512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800650a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650e:	2b00      	cmp	r3, #0
 8006510:	d054      	beq.n	80065bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 ffe3 	bl	80074de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006522:	2b40      	cmp	r3, #64	@ 0x40
 8006524:	d146      	bne.n	80065b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800653c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3308      	adds	r3, #8
 800654e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800655e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800656a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1d9      	bne.n	8006526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006582:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <HAL_UART_IRQHandler+0x2c0>)
 8006584:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658c:	4618      	mov	r0, r3
 800658e:	f7fc f8b1 	bl	80026f4 <HAL_DMA_Abort_IT>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d019      	beq.n	80065cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80065a6:	4610      	mov	r0, r2
 80065a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065aa:	e00f      	b.n	80065cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa13 	bl	80069d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b2:	e00b      	b.n	80065cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa0f 	bl	80069d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ba:	e007      	b.n	80065cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa0b 	bl	80069d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80065ca:	e1dc      	b.n	8006986 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	bf00      	nop
    return;
 80065ce:	e1da      	b.n	8006986 <HAL_UART_IRQHandler+0x66e>
 80065d0:	10000001 	.word	0x10000001
 80065d4:	04000120 	.word	0x04000120
 80065d8:	0800784b 	.word	0x0800784b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 8170 	bne.w	80068c6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8169 	beq.w	80068c6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8162 	beq.w	80068c6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b40      	cmp	r3, #64	@ 0x40
 8006616:	f040 80d8 	bne.w	80067ca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80af 	beq.w	8006790 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663c:	429a      	cmp	r2, r3
 800663e:	f080 80a7 	bcs.w	8006790 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8087 	bne.w	800676e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800667c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800668a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800668e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1da      	bne.n	8006660 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e1      	bne.n	80066aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3308      	adds	r3, #8
 80066ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800670a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800670c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e3      	bne.n	80066e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800673a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673c:	f023 0310 	bic.w	r3, r3, #16
 8006740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800675c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e4      	bne.n	800672c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006768:	4618      	mov	r0, r3
 800676a:	f7fb ff6a 	bl	8002642 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006780:	b29b      	uxth	r3, r3
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	b29b      	uxth	r3, r3
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f92f 	bl	80069ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800678e:	e0fc      	b.n	800698a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800679a:	429a      	cmp	r2, r3
 800679c:	f040 80f5 	bne.w	800698a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	f040 80eb 	bne.w	800698a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f912 	bl	80069ec <HAL_UARTEx_RxEventCallback>
      return;
 80067c8:	e0df      	b.n	800698a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80d1 	beq.w	800698e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80067ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80cc 	beq.w	800698e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800680a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006818:	647b      	str	r3, [r7, #68]	@ 0x44
 800681a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800681e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e4      	bne.n	80067f6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	623b      	str	r3, [r7, #32]
   return(result);
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006854:	633a      	str	r2, [r7, #48]	@ 0x30
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800685a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e1      	bne.n	800682c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	60fb      	str	r3, [r7, #12]
   return(result);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f023 0310 	bic.w	r3, r3, #16
 8006890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	69b9      	ldr	r1, [r7, #24]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	617b      	str	r3, [r7, #20]
   return(result);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e4      	bne.n	800687c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f894 	bl	80069ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c4:	e063      	b.n	800698e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <HAL_UART_IRQHandler+0x5d8>
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d008      	beq.n	80068f0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 ffeb 	bl	80078c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ee:	e051      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d014      	beq.n	8006926 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800690c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03a      	beq.n	8006992 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
    }
    return;
 8006924:	e035      	b.n	8006992 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_UART_IRQHandler+0x62e>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 ff95 	bl	800786e <UART_EndTransmit_IT>
    return;
 8006944:	e026      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <HAL_UART_IRQHandler+0x64e>
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006956:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 ffc4 	bl	80078ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006964:	e016      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <HAL_UART_IRQHandler+0x67c>
 8006972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006976:	2b00      	cmp	r3, #0
 8006978:	da0c      	bge.n	8006994 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 ffac 	bl	80078d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006980:	e008      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
      return;
 8006982:	bf00      	nop
 8006984:	e006      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
    return;
 8006986:	bf00      	nop
 8006988:	e004      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
      return;
 800698a:	bf00      	nop
 800698c:	e002      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
      return;
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <HAL_UART_IRQHandler+0x67c>
    return;
 8006992:	bf00      	nop
  }
}
 8006994:	37e8      	adds	r7, #232	@ 0xe8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop

0800699c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a08:	b08c      	sub	sp, #48	@ 0x30
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4bab      	ldr	r3, [pc, #684]	@ (8006ce0 <UART_SetConfig+0x2dc>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4aa0      	ldr	r2, [pc, #640]	@ (8006ce4 <UART_SetConfig+0x2e0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	f023 010f 	bic.w	r1, r3, #15
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a91      	ldr	r2, [pc, #580]	@ (8006ce8 <UART_SetConfig+0x2e4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d125      	bne.n	8006af4 <UART_SetConfig+0xf0>
 8006aa8:	4b90      	ldr	r3, [pc, #576]	@ (8006cec <UART_SetConfig+0x2e8>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d81a      	bhi.n	8006aec <UART_SetConfig+0xe8>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <UART_SetConfig+0xb8>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006add 	.word	0x08006add
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e0d6      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e0d2      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e0ce      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e0ca      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e0c6      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7d      	ldr	r2, [pc, #500]	@ (8006cf0 <UART_SetConfig+0x2ec>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d138      	bne.n	8006b70 <UART_SetConfig+0x16c>
 8006afe:	4b7b      	ldr	r3, [pc, #492]	@ (8006cec <UART_SetConfig+0x2e8>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b0c      	cmp	r3, #12
 8006b0a:	d82d      	bhi.n	8006b68 <UART_SetConfig+0x164>
 8006b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <UART_SetConfig+0x110>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b69 	.word	0x08006b69
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b59 	.word	0x08006b59
 8006b28:	08006b69 	.word	0x08006b69
 8006b2c:	08006b69 	.word	0x08006b69
 8006b30:	08006b69 	.word	0x08006b69
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b69 	.word	0x08006b69
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e098      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e094      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e090      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e08c      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e088      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5f      	ldr	r2, [pc, #380]	@ (8006cf4 <UART_SetConfig+0x2f0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d125      	bne.n	8006bc6 <UART_SetConfig+0x1c2>
 8006b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8006cec <UART_SetConfig+0x2e8>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b84:	2b30      	cmp	r3, #48	@ 0x30
 8006b86:	d016      	beq.n	8006bb6 <UART_SetConfig+0x1b2>
 8006b88:	2b30      	cmp	r3, #48	@ 0x30
 8006b8a:	d818      	bhi.n	8006bbe <UART_SetConfig+0x1ba>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d00a      	beq.n	8006ba6 <UART_SetConfig+0x1a2>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d814      	bhi.n	8006bbe <UART_SetConfig+0x1ba>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <UART_SetConfig+0x19a>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d008      	beq.n	8006bae <UART_SetConfig+0x1aa>
 8006b9c:	e00f      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba4:	e06d      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bac:	e069      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb4:	e065      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbc:	e061      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc4:	e05d      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a4b      	ldr	r2, [pc, #300]	@ (8006cf8 <UART_SetConfig+0x2f4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d125      	bne.n	8006c1c <UART_SetConfig+0x218>
 8006bd0:	4b46      	ldr	r3, [pc, #280]	@ (8006cec <UART_SetConfig+0x2e8>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bdc:	d016      	beq.n	8006c0c <UART_SetConfig+0x208>
 8006bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006be0:	d818      	bhi.n	8006c14 <UART_SetConfig+0x210>
 8006be2:	2b80      	cmp	r3, #128	@ 0x80
 8006be4:	d00a      	beq.n	8006bfc <UART_SetConfig+0x1f8>
 8006be6:	2b80      	cmp	r3, #128	@ 0x80
 8006be8:	d814      	bhi.n	8006c14 <UART_SetConfig+0x210>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <UART_SetConfig+0x1f0>
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d008      	beq.n	8006c04 <UART_SetConfig+0x200>
 8006bf2:	e00f      	b.n	8006c14 <UART_SetConfig+0x210>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfa:	e042      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c02:	e03e      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e03a      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c12:	e036      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1a:	e032      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a30      	ldr	r2, [pc, #192]	@ (8006ce4 <UART_SetConfig+0x2e0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d12a      	bne.n	8006c7c <UART_SetConfig+0x278>
 8006c26:	4b31      	ldr	r3, [pc, #196]	@ (8006cec <UART_SetConfig+0x2e8>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c34:	d01a      	beq.n	8006c6c <UART_SetConfig+0x268>
 8006c36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c3a:	d81b      	bhi.n	8006c74 <UART_SetConfig+0x270>
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c40:	d00c      	beq.n	8006c5c <UART_SetConfig+0x258>
 8006c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c46:	d815      	bhi.n	8006c74 <UART_SetConfig+0x270>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x250>
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c50:	d008      	beq.n	8006c64 <UART_SetConfig+0x260>
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x270>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e012      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e00e      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e00a      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	e006      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7a:	e002      	b.n	8006c82 <UART_SetConfig+0x27e>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a17      	ldr	r2, [pc, #92]	@ (8006ce4 <UART_SetConfig+0x2e0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	f040 80a8 	bne.w	8006dde <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d834      	bhi.n	8006d00 <UART_SetConfig+0x2fc>
 8006c96:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <UART_SetConfig+0x298>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006d01 	.word	0x08006d01
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006d01 	.word	0x08006d01
 8006cac:	08006ccf 	.word	0x08006ccf
 8006cb0:	08006d01 	.word	0x08006d01
 8006cb4:	08006d01 	.word	0x08006d01
 8006cb8:	08006d01 	.word	0x08006d01
 8006cbc:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc0:	f7fe ff16 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc6:	e021      	b.n	8006d0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <UART_SetConfig+0x2f8>)
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ccc:	e01e      	b.n	8006d0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fe fea1 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd4:	e01a      	b.n	8006d0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cdc:	e016      	b.n	8006d0c <UART_SetConfig+0x308>
 8006cde:	bf00      	nop
 8006ce0:	cfff69f3 	.word	0xcfff69f3
 8006ce4:	40008000 	.word	0x40008000
 8006ce8:	40013800 	.word	0x40013800
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40004400 	.word	0x40004400
 8006cf4:	40004800 	.word	0x40004800
 8006cf8:	40004c00 	.word	0x40004c00
 8006cfc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 812a 	beq.w	8006f68 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	4a9e      	ldr	r2, [pc, #632]	@ (8006f94 <UART_SetConfig+0x590>)
 8006d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	4413      	add	r3, r2
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d305      	bcc.n	8006d44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d903      	bls.n	8006d4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d4a:	e10d      	b.n	8006f68 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	2200      	movs	r2, #0
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	60fa      	str	r2, [r7, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	4a8e      	ldr	r2, [pc, #568]	@ (8006f94 <UART_SetConfig+0x590>)
 8006d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2200      	movs	r2, #0
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d6e:	f7f9 fa53 	bl	8000218 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4610      	mov	r0, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	020b      	lsls	r3, r1, #8
 8006d84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d88:	0202      	lsls	r2, r0, #8
 8006d8a:	6979      	ldr	r1, [r7, #20]
 8006d8c:	6849      	ldr	r1, [r1, #4]
 8006d8e:	0849      	lsrs	r1, r1, #1
 8006d90:	2000      	movs	r0, #0
 8006d92:	460c      	mov	r4, r1
 8006d94:	4605      	mov	r5, r0
 8006d96:	eb12 0804 	adds.w	r8, r2, r4
 8006d9a:	eb43 0905 	adc.w	r9, r3, r5
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	469a      	mov	sl, r3
 8006da6:	4693      	mov	fp, r2
 8006da8:	4652      	mov	r2, sl
 8006daa:	465b      	mov	r3, fp
 8006dac:	4640      	mov	r0, r8
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7f9 fa32 	bl	8000218 <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4613      	mov	r3, r2
 8006dba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc2:	d308      	bcc.n	8006dd6 <UART_SetConfig+0x3d2>
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dca:	d204      	bcs.n	8006dd6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a3a      	ldr	r2, [r7, #32]
 8006dd2:	60da      	str	r2, [r3, #12]
 8006dd4:	e0c8      	b.n	8006f68 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ddc:	e0c4      	b.n	8006f68 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de6:	d167      	bne.n	8006eb8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006de8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d828      	bhi.n	8006e42 <UART_SetConfig+0x43e>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0x3f4>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e43 	.word	0x08006e43
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e43 	.word	0x08006e43
 8006e10:	08006e43 	.word	0x08006e43
 8006e14:	08006e43 	.word	0x08006e43
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fe fe68 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fe fe7a 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
 8006e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f98 <UART_SetConfig+0x594>)
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fe fdef 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8089 	beq.w	8006f68 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8006f94 <UART_SetConfig+0x590>)
 8006e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e68:	005a      	lsls	r2, r3, #1
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	441a      	add	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d916      	bls.n	8006eb0 <UART_SetConfig+0x4ac>
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e88:	d212      	bcs.n	8006eb0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	8bfa      	ldrh	r2, [r7, #30]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e05b      	b.n	8006f68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006eb6:	e057      	b.n	8006f68 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d828      	bhi.n	8006f12 <UART_SetConfig+0x50e>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <UART_SetConfig+0x4c4>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fe fe00 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ef2:	e014      	b.n	8006f1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fe fe12 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efa:	e010      	b.n	8006f1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b26      	ldr	r3, [pc, #152]	@ (8006f98 <UART_SetConfig+0x594>)
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f00:	e00d      	b.n	8006f1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fe fd87 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 8006f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d021      	beq.n	8006f68 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	4a1a      	ldr	r2, [pc, #104]	@ (8006f94 <UART_SetConfig+0x590>)
 8006f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d909      	bls.n	8006f62 <UART_SetConfig+0x55e>
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f54:	d205      	bcs.n	8006f62 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e002      	b.n	8006f68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3730      	adds	r7, #48	@ 0x30
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f92:	bf00      	nop
 8006f94:	08007bc8 	.word	0x08007bc8
 8006f98:	00f42400 	.word	0x00f42400

08006f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800709a:	d10a      	bne.n	80070b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b098      	sub	sp, #96	@ 0x60
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f0:	f7fa fd98 	bl	8001c24 <HAL_GetTick>
 80070f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b08      	cmp	r3, #8
 8007102:	d12f      	bne.n	8007164 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800710c:	2200      	movs	r2, #0
 800710e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f88e 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d022      	beq.n	8007164 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800712c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007132:	653b      	str	r3, [r7, #80]	@ 0x50
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800713c:	647b      	str	r3, [r7, #68]	@ 0x44
 800713e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e063      	b.n	800722c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b04      	cmp	r3, #4
 8007170:	d149      	bne.n	8007206 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007172:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717a:	2200      	movs	r2, #0
 800717c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f857 	bl	8007234 <UART_WaitOnFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d03c      	beq.n	8007206 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	623b      	str	r3, [r7, #32]
   return(result);
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071de:	61fa      	str	r2, [r7, #28]
 80071e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69b9      	ldr	r1, [r7, #24]
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	617b      	str	r3, [r7, #20]
   return(result);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e012      	b.n	800722c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3758      	adds	r7, #88	@ 0x58
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007244:	e04f      	b.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d04b      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fa fce9 	bl	8001c24 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <UART_WaitOnFlagUntilTimeout+0x30>
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e04e      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d037      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b80      	cmp	r3, #128	@ 0x80
 800727a:	d034      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	d031      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d110      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2208      	movs	r2, #8
 8007296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f920 	bl	80074de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2208      	movs	r2, #8
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e029      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c0:	d111      	bne.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f906 	bl	80074de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e00f      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	429a      	cmp	r2, r3
 8007302:	d0a0      	beq.n	8007246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b096      	sub	sp, #88	@ 0x58
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2222      	movs	r2, #34	@ 0x22
 8007338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d02d      	beq.n	80073a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800734c:	4a40      	ldr	r2, [pc, #256]	@ (8007450 <UART_Start_Receive_DMA+0x140>)
 800734e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007356:	4a3f      	ldr	r2, [pc, #252]	@ (8007454 <UART_Start_Receive_DMA+0x144>)
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007360:	4a3d      	ldr	r2, [pc, #244]	@ (8007458 <UART_Start_Receive_DMA+0x148>)
 8007362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800736a:	2200      	movs	r2, #0
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3324      	adds	r3, #36	@ 0x24
 800737a:	4619      	mov	r1, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	461a      	mov	r2, r3
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	f7fb f8e2 	bl	800254c <HAL_DMA_Start_IT>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2210      	movs	r2, #16
 8007392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e051      	b.n	8007446 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073be:	657b      	str	r3, [r7, #84]	@ 0x54
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80073d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	613b      	str	r3, [r7, #16]
   return(result);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007430:	623a      	str	r2, [r7, #32]
 8007432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	69f9      	ldr	r1, [r7, #28]
 8007436:	6a3a      	ldr	r2, [r7, #32]
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	61bb      	str	r3, [r7, #24]
   return(result);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e5      	bne.n	8007410 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3758      	adds	r7, #88	@ 0x58
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	08007661 	.word	0x08007661
 8007454:	0800778d 	.word	0x0800778d
 8007458:	080077cb 	.word	0x080077cb

0800745c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b08f      	sub	sp, #60	@ 0x3c
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	61fb      	str	r3, [r7, #28]
   return(result);
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007484:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3308      	adds	r3, #8
 80074b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b6:	61ba      	str	r2, [r7, #24]
 80074b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	613b      	str	r3, [r7, #16]
   return(result);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e5      	bne.n	8007496 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80074d2:	bf00      	nop
 80074d4:	373c      	adds	r7, #60	@ 0x3c
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074de:	b480      	push	{r7}
 80074e0:	b095      	sub	sp, #84	@ 0x54
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007504:	643b      	str	r3, [r7, #64]	@ 0x40
 8007506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800750a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	61fb      	str	r3, [r7, #28]
   return(result);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800753c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d118      	bne.n	800758a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	60bb      	str	r3, [r7, #8]
   return(result);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f023 0310 	bic.w	r3, r3, #16
 800756c:	647b      	str	r3, [r7, #68]	@ 0x44
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	613b      	str	r3, [r7, #16]
   return(result);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800759e:	bf00      	nop
 80075a0:	3754      	adds	r7, #84	@ 0x54
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b090      	sub	sp, #64	@ 0x40
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d137      	bne.n	8007636 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80075c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	623b      	str	r3, [r7, #32]
   return(result);
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80075f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e5      	bne.n	80075ce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
 8007618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	617b      	str	r3, [r7, #20]
   return(result);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007634:	e002      	b.n	800763c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007636:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007638:	f7f9 fd86 	bl	8001148 <HAL_UART_TxCpltCallback>
}
 800763c:	bf00      	nop
 800763e:	3740      	adds	r7, #64	@ 0x40
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff f9a2 	bl	800699c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	@ 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d171      	bne.n	8007760 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800767c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767e:	2200      	movs	r2, #0
 8007680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800769a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80076ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80076d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80076d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	623b      	str	r3, [r7, #32]
   return(result);
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007700:	663b      	str	r3, [r7, #96]	@ 0x60
 8007702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800770a:	633a      	str	r2, [r7, #48]	@ 0x30
 800770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e5      	bne.n	80076ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800771e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d118      	bne.n	8007760 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60fb      	str	r3, [r7, #12]
   return(result);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	617b      	str	r3, [r7, #20]
   return(result);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007762:	2200      	movs	r2, #0
 8007764:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d107      	bne.n	800777e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800776e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007774:	4619      	mov	r1, r3
 8007776:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007778:	f7ff f938 	bl	80069ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800777c:	e002      	b.n	8007784 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800777e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007780:	f7ff f916 	bl	80069b0 <HAL_UART_RxCpltCallback>
}
 8007784:	bf00      	nop
 8007786:	3770      	adds	r7, #112	@ 0x70
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d109      	bne.n	80077bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4619      	mov	r1, r3
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff f919 	bl	80069ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077ba:	e002      	b.n	80077c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff f901 	bl	80069c4 <HAL_UART_RxHalfCpltCallback>
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f2:	2b80      	cmp	r3, #128	@ 0x80
 80077f4:	d109      	bne.n	800780a <UART_DMAError+0x40>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b21      	cmp	r3, #33	@ 0x21
 80077fa:	d106      	bne.n	800780a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007804:	6978      	ldr	r0, [r7, #20]
 8007806:	f7ff fe29 	bl	800745c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007814:	2b40      	cmp	r3, #64	@ 0x40
 8007816:	d109      	bne.n	800782c <UART_DMAError+0x62>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b22      	cmp	r3, #34	@ 0x22
 800781c:	d106      	bne.n	800782c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff fe59 	bl	80074de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007832:	f043 0210 	orr.w	r2, r3, #16
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800783c:	6978      	ldr	r0, [r7, #20]
 800783e:	f7ff f8cb 	bl	80069d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007842:	bf00      	nop
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff f8b9 	bl	80069d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e6      	bne.n	8007876 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7f9 fc46 	bl	8001148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078bc:	bf00      	nop
 80078be:	3720      	adds	r7, #32
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UARTEx_DisableFifoMode+0x16>
 8007912:	2302      	movs	r3, #2
 8007914:	e027      	b.n	8007966 <HAL_UARTEx_DisableFifoMode+0x66>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2224      	movs	r2, #36	@ 0x24
 8007922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007986:	2302      	movs	r3, #2
 8007988:	e02d      	b.n	80079e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2224      	movs	r2, #36	@ 0x24
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f850 	bl	8007a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e02d      	b.n	8007a62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2224      	movs	r2, #36	@ 0x24
 8007a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f812 	bl	8007a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a8c:	e031      	b.n	8007af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a8e:	2308      	movs	r3, #8
 8007a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a92:	2308      	movs	r3, #8
 8007a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	0e5b      	lsrs	r3, r3, #25
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	0f5b      	lsrs	r3, r3, #29
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	7b3a      	ldrb	r2, [r7, #12]
 8007aba:	4911      	ldr	r1, [pc, #68]	@ (8007b00 <UARTEx_SetNbDataToProcess+0x94>)
 8007abc:	5c8a      	ldrb	r2, [r1, r2]
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ac2:	7b3a      	ldrb	r2, [r7, #12]
 8007ac4:	490f      	ldr	r1, [pc, #60]	@ (8007b04 <UARTEx_SetNbDataToProcess+0x98>)
 8007ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	7b7a      	ldrb	r2, [r7, #13]
 8007ad8:	4909      	ldr	r1, [pc, #36]	@ (8007b00 <UARTEx_SetNbDataToProcess+0x94>)
 8007ada:	5c8a      	ldrb	r2, [r1, r2]
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	4908      	ldr	r1, [pc, #32]	@ (8007b04 <UARTEx_SetNbDataToProcess+0x98>)
 8007ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	08007be0 	.word	0x08007be0
 8007b04:	08007be8 	.word	0x08007be8

08007b08 <memset>:
 8007b08:	4402      	add	r2, r0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d100      	bne.n	8007b12 <memset+0xa>
 8007b10:	4770      	bx	lr
 8007b12:	f803 1b01 	strb.w	r1, [r3], #1
 8007b16:	e7f9      	b.n	8007b0c <memset+0x4>

08007b18 <__libc_init_array>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b50 <__libc_init_array+0x38>)
 8007b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b54 <__libc_init_array+0x3c>)
 8007b1e:	1b64      	subs	r4, r4, r5
 8007b20:	10a4      	asrs	r4, r4, #2
 8007b22:	2600      	movs	r6, #0
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	d109      	bne.n	8007b3c <__libc_init_array+0x24>
 8007b28:	4d0b      	ldr	r5, [pc, #44]	@ (8007b58 <__libc_init_array+0x40>)
 8007b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b5c <__libc_init_array+0x44>)
 8007b2c:	f000 f826 	bl	8007b7c <_init>
 8007b30:	1b64      	subs	r4, r4, r5
 8007b32:	10a4      	asrs	r4, r4, #2
 8007b34:	2600      	movs	r6, #0
 8007b36:	42a6      	cmp	r6, r4
 8007b38:	d105      	bne.n	8007b46 <__libc_init_array+0x2e>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b40:	4798      	blx	r3
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7ee      	b.n	8007b24 <__libc_init_array+0xc>
 8007b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4a:	4798      	blx	r3
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	e7f2      	b.n	8007b36 <__libc_init_array+0x1e>
 8007b50:	08007bf8 	.word	0x08007bf8
 8007b54:	08007bf8 	.word	0x08007bf8
 8007b58:	08007bf8 	.word	0x08007bf8
 8007b5c:	08007bfc 	.word	0x08007bfc

08007b60 <memcpy>:
 8007b60:	440a      	add	r2, r1
 8007b62:	4291      	cmp	r1, r2
 8007b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b68:	d100      	bne.n	8007b6c <memcpy+0xc>
 8007b6a:	4770      	bx	lr
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b76:	4291      	cmp	r1, r2
 8007b78:	d1f9      	bne.n	8007b6e <memcpy+0xe>
 8007b7a:	bd10      	pop	{r4, pc}

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
