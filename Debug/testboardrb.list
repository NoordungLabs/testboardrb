
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003904  08003904  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003904  08003904  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003908  08003908  00004908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800390c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08003918  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003918  000050a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009262  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  0000e29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071f  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd45  00000000  00000000  00010c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b607  00000000  00000000  0002c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afa58  00000000  00000000  00037f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e79e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000e7a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ea098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003880 	.word	0x08003880

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003880 	.word	0x08003880

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <selectMuxPin>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */
void selectMuxPin(uint8_t pin) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t j = 0; j < 3; j++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e03f      	b.n	8000ae4 <selectMuxPin+0x90>
		if (pin & (1 << j)) {
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	fa42 f303 	asr.w	r3, r2, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d01a      	beq.n	8000aaa <selectMuxPin+0x56>
			if (j == 2) {
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d10b      	bne.n	8000a92 <selectMuxPin+0x3e>
				HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <selectMuxPin+0xa0>)
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f001 f918 	bl	8001cc0 <HAL_GPIO_WritePin>
 8000a90:	e025      	b.n	8000ade <selectMuxPin+0x8a>
			} else {
				HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <selectMuxPin+0xa0>)
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f001 f90c 	bl	8001cc0 <HAL_GPIO_WritePin>
 8000aa8:	e019      	b.n	8000ade <selectMuxPin+0x8a>
			}
		} else {
			if (j == 2) {
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d10b      	bne.n	8000ac8 <selectMuxPin+0x74>
				HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <selectMuxPin+0xa0>)
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f001 f8fd 	bl	8001cc0 <HAL_GPIO_WritePin>
 8000ac6:	e00a      	b.n	8000ade <selectMuxPin+0x8a>
			} else {
				HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <selectMuxPin+0xa0>)
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f001 f8f1 	bl	8001cc0 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 3; j++) {
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d9bc      	bls.n	8000a64 <selectMuxPin+0x10>
			}
		}
	}
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080038e8 	.word	0x080038e8

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000afc:	b0c6      	sub	sp, #280	@ 0x118
 8000afe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fdcd 	bl	800169e <HAL_Init>
  	uint32_t rawPressureData;
  	int32_t rawTemperatureData;
  	float fpressureData;
  	float fpressureData2;
  	float truePressureData;
  	float runningAveragePressure[NUM_OF_SENSORS][5];
 8000b04:	2304      	movs	r3, #4
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	f04f 0100 	mov.w	r1, #0
 8000b22:	0099      	lsls	r1, r3, #2
 8000b24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b28:	0090      	lsls	r0, r2, #2
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	6a39      	ldr	r1, [r7, #32]
 8000b30:	1854      	adds	r4, r2, r1
 8000b32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b34:	eb43 0101 	adc.w	r1, r3, r1
 8000b38:	460d      	mov	r5, r1
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	016b      	lsls	r3, r5, #5
 8000b44:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b48:	0162      	lsls	r2, r4, #5
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	61fa      	str	r2, [r7, #28]
 8000b54:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000b58:	4622      	mov	r2, r4
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	f04f 0100 	mov.w	r1, #0
 8000b64:	0099      	lsls	r1, r3, #2
 8000b66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b6a:	0090      	lsls	r0, r2, #2
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4621      	mov	r1, r4
 8000b72:	1851      	adds	r1, r2, r1
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	4629      	mov	r1, r5
 8000b78:	eb43 0101 	adc.w	r1, r3, r1
 8000b7c:	6079      	str	r1, [r7, #4]
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	014b      	lsls	r3, r1, #5
 8000b8e:	4621      	mov	r1, r4
 8000b90:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000b94:	4621      	mov	r1, r4
 8000b96:	014a      	lsls	r2, r1, #5
 8000b98:	2304      	movs	r3, #4
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	ebad 0d03 	sub.w	sp, sp, r3
 8000bae:	ab02      	add	r3, sp, #8
 8000bb0:	3303      	adds	r3, #3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  	float ftemperatureData;
  	float runningAverageTemperature[NUM_OF_SENSORS][5];
 8000bba:	2304      	movs	r3, #4
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	617a      	str	r2, [r7, #20]
 8000bcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	462b      	mov	r3, r5
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	f04f 0100 	mov.w	r1, #0
 8000bdc:	0099      	lsls	r1, r3, #2
 8000bde:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000be2:	0090      	lsls	r0, r2, #2
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4621      	mov	r1, r4
 8000bea:	eb12 0a01 	adds.w	sl, r2, r1
 8000bee:	4629      	mov	r1, r5
 8000bf0:	eb43 0b01 	adc.w	fp, r3, r1
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000c00:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000c04:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000c08:	2304      	movs	r3, #4
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	60fa      	str	r2, [r7, #12]
 8000c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000c16:	4622      	mov	r2, r4
 8000c18:	462b      	mov	r3, r5
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	f04f 0100 	mov.w	r1, #0
 8000c22:	0099      	lsls	r1, r3, #2
 8000c24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c28:	0090      	lsls	r0, r2, #2
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4621      	mov	r1, r4
 8000c30:	eb12 0801 	adds.w	r8, r2, r1
 8000c34:	4629      	mov	r1, r5
 8000c36:	eb43 0901 	adc.w	r9, r3, r1
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000c46:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000c4a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000c4e:	2304      	movs	r3, #4
 8000c50:	461a      	mov	r2, r3
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	ebad 0d03 	sub.w	sp, sp, r3
 8000c64:	ab02      	add	r3, sp, #8
 8000c66:	3303      	adds	r3, #3
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  	float temperatureSum = 0;
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  	float temperatureAverage = 0;
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  	float trueTemparature;
  	float Fullscale_P = 40000;
 8000c80:	4bc9      	ldr	r3, [pc, #804]	@ (8000fa8 <main+0x4b0>)
 8000c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  	float pressureSum = 0;
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  	float pressureAverage = 0;
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  	uint32_t timeRef1 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  	uint32_t timeRef2 = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  	uint32_t timeRef3 = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  	uint32_t timeRef4 = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  	uint32_t timeOpen1 = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  	uint32_t timeOpen2 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  	uint32_t opento1 = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  	uint32_t opento2 = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  	uint32_t opento3 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  	uint32_t opento4 = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  	uint32_t openTick1 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  	uint32_t openTick2 = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  	uint32_t openTick3 = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  	uint32_t openTick4 = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac


  	//Sensor calibration values
  	float calibration[10] = { 1000  / 1.5 / 1.10/5, 300 / 1.40/2, 200, 120.0/1.3, 1, 1, 1, 1, 1, 1 };
 8000cea:	4bb0      	ldr	r3, [pc, #704]	@ (8000fac <main+0x4b4>)
 8000cec:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cfe:	e884 0003 	stmia.w	r4, {r0, r1}
  	float tempcal[10] = { 2.15, 2, 2.15, 2, 1, 1, 1, 1, 1, 1 };
 8000d02:	4bab      	ldr	r3, [pc, #684]	@ (8000fb0 <main+0x4b8>)
 8000d04:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000d08:	461d      	mov	r5, r3
 8000d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d16:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 fac7 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 fb45 	bl	80013ac <MX_GPIO_Init>
  MX_I2C3_Init();
 8000d22:	f000 fb03 	bl	800132c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	48a2      	ldr	r0, [pc, #648]	@ (8000fb4 <main+0x4bc>)
 8000d2c:	f000 ffc8 	bl	8001cc0 <HAL_GPIO_WritePin>

	//Initialize MUX
	for (uint8_t i = 0; i < 3; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
 8000d36:	e021      	b.n	8000d7c <main+0x284>
		if (i == 2) {
 8000d38:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d10c      	bne.n	8000d5a <main+0x262>
			HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 8000d40:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000d44:	4a9c      	ldr	r2, [pc, #624]	@ (8000fb8 <main+0x4c0>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f000 ffb4 	bl	8001cc0 <HAL_GPIO_WritePin>
 8000d58:	e00b      	b.n	8000d72 <main+0x27a>
		} else {
			HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 8000d5a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000d5e:	4a96      	ldr	r2, [pc, #600]	@ (8000fb8 <main+0x4c0>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	2201      	movs	r2, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f000 ffa7 	bl	8001cc0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++) {
 8000d72:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000d76:	3301      	adds	r3, #1
 8000d78:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
 8000d7c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d9d9      	bls.n	8000d38 <main+0x240>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Manually set PC8 high

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000d84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f000 ffb0 	bl	8001cf0 <HAL_GPIO_TogglePin>
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000d90:	2102      	movs	r1, #2
 8000d92:	4888      	ldr	r0, [pc, #544]	@ (8000fb4 <main+0x4bc>)
 8000d94:	f000 ff7c 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b85      	ldr	r3, [pc, #532]	@ (8000fbc <main+0x4c4>)
 8000da8:	701a      	strb	r2, [r3, #0]
	  isOn =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000daa:	2101      	movs	r1, #1
 8000dac:	4881      	ldr	r0, [pc, #516]	@ (8000fb4 <main+0x4bc>)
 8000dae:	f000 ff6f 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b82      	ldr	r3, [pc, #520]	@ (8000fc0 <main+0x4c8>)
 8000db8:	701a      	strb	r2, [r3, #0]
	  ballin =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8000dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dbe:	4881      	ldr	r0, [pc, #516]	@ (8000fc4 <main+0x4cc>)
 8000dc0:	f000 ff66 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc8 <main+0x4d0>)
 8000dca:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(4000);
 8000dcc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000dd0:	f000 fcd6 	bl	8001780 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dda:	4876      	ldr	r0, [pc, #472]	@ (8000fb4 <main+0x4bc>)
 8000ddc:	f000 ff70 	bl	8001cc0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de6:	4873      	ldr	r0, [pc, #460]	@ (8000fb4 <main+0x4bc>)
 8000de8:	f000 ff6a 	bl	8001cc0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	4870      	ldr	r0, [pc, #448]	@ (8000fb4 <main+0x4bc>)
 8000df4:	f000 ff64 	bl	8001cc0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfe:	486d      	ldr	r0, [pc, #436]	@ (8000fb4 <main+0x4bc>)
 8000e00:	f000 ff5e 	bl	8001cc0 <HAL_GPIO_WritePin>

	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8000e0a:	e224      	b.n	8001256 <main+0x75e>
		  	 selectMuxPin(i);
 8000e0c:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe1f 	bl	8000a54 <selectMuxPin>
		  //Set instructions for temperature and pressure sensors
			instructionArray[0] = 0x30;
 8000e16:	2330      	movs	r3, #48	@ 0x30
 8000e18:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
			instructionArray[1] = 0x0A;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
			addressArray[0] = 0x06;
 8000e22:	2306      	movs	r3, #6
 8000e24:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
			HAL_StatusTypeDef status0 =  HAL_I2C_Master_Transmit(&hi2c3, 0x7f << 1, instructionArray, 2, 200);
 8000e28:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8000e2c:	23c8      	movs	r3, #200	@ 0xc8
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2302      	movs	r3, #2
 8000e32:	21fe      	movs	r1, #254	@ 0xfe
 8000e34:	4865      	ldr	r0, [pc, #404]	@ (8000fcc <main+0x4d4>)
 8000e36:	f001 f811 	bl	8001e5c <HAL_I2C_Master_Transmit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
			HAL_StatusTypeDef status1 =  HAL_I2C_Master_Transmit(&hi2c3, 0x7f << 1, addressArray, 1, 200);
 8000e40:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000e44:	23c8      	movs	r3, #200	@ 0xc8
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21fe      	movs	r1, #254	@ 0xfe
 8000e4c:	485f      	ldr	r0, [pc, #380]	@ (8000fcc <main+0x4d4>)
 8000e4e:	f001 f805 	bl	8001e5c <HAL_I2C_Master_Transmit>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
			HAL_StatusTypeDef status2 =  HAL_I2C_Master_Receive(&hi2c3, 0x7f << 1, receiveArray, 5, 200);
 8000e58:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000e5c:	23c8      	movs	r3, #200	@ 0xc8
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2305      	movs	r3, #5
 8000e62:	21fe      	movs	r1, #254	@ 0xfe
 8000e64:	4859      	ldr	r0, [pc, #356]	@ (8000fcc <main+0x4d4>)
 8000e66:	f001 f911 	bl	800208c <HAL_I2C_Master_Receive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9


			//Pressure data interpretation
			rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | (receiveArray[2]);
 8000e70:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	f897 207a 	ldrb.w	r2, [r7, #122]	@ 0x7a
 8000e82:	4313      	orrs	r3, r2
 8000e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			fpressureData = rawPressureData;
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e94:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
			if (fpressureData >= 8388608) {
 8000e98:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8000e9c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8000fd0 <main+0x4d8>
 8000ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	db3f      	blt.n	8000f2a <main+0x432>
				fpressureData2 = (fpressureData - 16777216.0) * Fullscale_P * calibration[i] / 8388608.0;
 8000eaa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000eae:	f7ff fb17 	bl	80004e0 <__aeabi_f2d>
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b47      	ldr	r3, [pc, #284]	@ (8000fd4 <main+0x4dc>)
 8000eb8:	f7ff f9b2 	bl	8000220 <__aeabi_dsub>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8000ec8:	f7ff fb0a 	bl	80004e0 <__aeabi_f2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	f7ff fb5c 	bl	8000590 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4614      	mov	r4, r2
 8000ede:	461d      	mov	r5, r3
 8000ee0:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	33e8      	adds	r3, #232	@ 0xe8
 8000ee8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000eec:	4413      	add	r3, r2
 8000eee:	3bc0      	subs	r3, #192	@ 0xc0
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff faf4 	bl	80004e0 <__aeabi_f2d>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff fb46 	bl	8000590 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <main+0x4e0>)
 8000f12:	f7ff fc67 	bl	80007e4 <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fd49 	bl	80009b4 <__aeabi_d2f>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f28:	e035      	b.n	8000f96 <main+0x49e>
			} else {
				fpressureData2 = fpressureData / 8388608.0 * Fullscale_P * calibration[i]; //delis zaradi max vrednosti
 8000f2a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000f2e:	f7ff fad7 	bl	80004e0 <__aeabi_f2d>
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <main+0x4e0>)
 8000f38:	f7ff fc54 	bl	80007e4 <__aeabi_ddiv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4614      	mov	r4, r2
 8000f42:	461d      	mov	r5, r3
 8000f44:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8000f48:	f7ff faca 	bl	80004e0 <__aeabi_f2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	f7ff fb1c 	bl	8000590 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	461d      	mov	r5, r3
 8000f60:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	33e8      	adds	r3, #232	@ 0xe8
 8000f68:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3bc0      	subs	r3, #192	@ 0xc0
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fab4 	bl	80004e0 <__aeabi_f2d>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f7ff fb06 	bl	8000590 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fd12 	bl	80009b4 <__aeabi_d2f>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			}
			truePressureData = fpressureData2;
 8000f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

			//Running average  for stable data
			for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 8000fa4:	e080      	b.n	80010a8 <main+0x5b0>
 8000fa6:	bf00      	nop
 8000fa8:	471c4000 	.word	0x471c4000
 8000fac:	08003898 	.word	0x08003898
 8000fb0:	080038c0 	.word	0x080038c0
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	080038e8 	.word	0x080038e8
 8000fbc:	2000009c 	.word	0x2000009c
 8000fc0:	2000009d 	.word	0x2000009d
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	2000009e 	.word	0x2000009e
 8000fcc:	20000028 	.word	0x20000028
 8000fd0:	4b000000 	.word	0x4b000000
 8000fd4:	41700000 	.word	0x41700000
 8000fd8:	41600000 	.word	0x41600000
				if (j == 0) {
 8000fdc:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <main+0x4f4>
					pressureSum = 0;
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				}
				if (j == RUNAVGAM - 1) {
 8000fec:	f897 2101 	ldrb.w	r2, [r7, #257]	@ 0x101
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d123      	bne.n	8001040 <main+0x548>
					runningAveragePressure[i][j] = truePressureData;
 8000ff8:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 8000ffc:	f897 0101 	ldrb.w	r0, [r7, #257]	@ 0x101
 8001000:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	4403      	add	r3, r0
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001014:	601a      	str	r2, [r3, #0]
					pressureSum += runningAveragePressure[i][j];
 8001016:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 800101a:	f897 0101 	ldrb.w	r0, [r7, #257]	@ 0x101
 800101e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	4403      	add	r3, r0
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
					break;
 800103e:	e038      	b.n	80010b2 <main+0x5ba>
				}
				runningAveragePressure[i][j] = runningAveragePressure[i][j + 1];
 8001040:	f897 1102 	ldrb.w	r1, [r7, #258]	@ 0x102
 8001044:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8001048:	1c5d      	adds	r5, r3, #1
 800104a:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 800104e:	f897 4101 	ldrb.w	r4, [r7, #257]	@ 0x101
 8001052:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	442b      	add	r3, r5
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4403      	add	r3, r0
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	4423      	add	r3, r4
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4403      	add	r3, r0
 8001074:	6019      	str	r1, [r3, #0]
				pressureSum += runningAveragePressure[i][j];
 8001076:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 800107a:	f897 0101 	ldrb.w	r0, [r7, #257]	@ 0x101
 800107e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	4403      	add	r3, r0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
			for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800109e:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 80010a8:	2205      	movs	r2, #5
 80010aa:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d394      	bcc.n	8000fdc <main+0x4e4>
			}
			pressureAverage = pressureSum / RUNAVGAM;
 80010b2:	2305      	movs	r3, #5
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	edd7 6a41 	vldr	s13, [r7, #260]	@ 0x104
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4

			//Temperature data interpretation
			rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 80010c8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 80010d2:	4313      	orrs	r3, r2
 80010d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			ftemperatureData = rawTemperatureData;
 80010d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
			trueTemparature = ftemperatureData / 256.0 * tempcal[i];
 80010e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80010ec:	f7ff f9f8 	bl	80004e0 <__aeabi_f2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b69      	ldr	r3, [pc, #420]	@ (800129c <main+0x7a4>)
 80010f6:	f7ff fb75 	bl	80007e4 <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	33e8      	adds	r3, #232	@ 0xe8
 800110a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800110e:	4413      	add	r3, r2
 8001110:	3be8      	subs	r3, #232	@ 0xe8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9e3 	bl	80004e0 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff fa35 	bl	8000590 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fc41 	bl	80009b4 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

			//Running average  for stable data
			for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 800113e:	e065      	b.n	800120c <main+0x714>
				if (j == 0) {
 8001140:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <main+0x658>
					temperatureSum = 0;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
				}
				if (j == RUNAVGAM - 1) {
 8001150:	f897 2100 	ldrb.w	r2, [r7, #256]	@ 0x100
 8001154:	2305      	movs	r3, #5
 8001156:	3b01      	subs	r3, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	d123      	bne.n	80011a4 <main+0x6ac>
					runningAverageTemperature[i][j] = trueTemparature;
 800115c:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 8001160:	f897 0100 	ldrb.w	r0, [r7, #256]	@ 0x100
 8001164:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	4403      	add	r3, r0
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001178:	601a      	str	r2, [r3, #0]
					temperatureSum += runningAverageTemperature[i][j];
 800117a:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 800117e:	f897 0100 	ldrb.w	r0, [r7, #256]	@ 0x100
 8001182:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	4403      	add	r3, r0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
					break;
 80011a2:	e038      	b.n	8001216 <main+0x71e>
				}
				runningAverageTemperature[i][j] = runningAverageTemperature[i][j + 1];
 80011a4:	f897 1102 	ldrb.w	r1, [r7, #258]	@ 0x102
 80011a8:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80011ac:	1c5d      	adds	r5, r3, #1
 80011ae:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 80011b2:	f897 4100 	ldrb.w	r4, [r7, #256]	@ 0x100
 80011b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 80011ba:	460b      	mov	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	442b      	add	r3, r5
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4403      	add	r3, r0
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	4423      	add	r3, r4
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4403      	add	r3, r0
 80011d8:	6019      	str	r1, [r3, #0]
				temperatureSum += runningAverageTemperature[i][j];
 80011da:	f897 2102 	ldrb.w	r2, [r7, #258]	@ 0x102
 80011de:	f897 0100 	ldrb.w	r0, [r7, #256]	@ 0x100
 80011e2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	4403      	add	r3, r0
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
			for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8001202:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001206:	3301      	adds	r3, #1
 8001208:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 800120c:	2205      	movs	r2, #5
 800120e:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001212:	4293      	cmp	r3, r2
 8001214:	d394      	bcc.n	8001140 <main+0x648>
			}
			temperatureAverage = temperatureSum / RUNAVGAM;
 8001216:	2305      	movs	r3, #5
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	edd7 6a42 	vldr	s13, [r7, #264]	@ 0x108
 8001224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001228:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
			pressureArray[i] = pressureAverage;
 800122c:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <main+0x7a8>)
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800123a:	601a      	str	r2, [r3, #0]
			temperatureArray[i] = temperatureAverage;
 800123c:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <main+0x7ac>)
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800124a:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++) {
 800124c:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001250:	3301      	adds	r3, #1
 8001252:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8001256:	2204      	movs	r2, #4
 8001258:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 800125c:	4293      	cmp	r3, r2
 800125e:	f4ff add5 	bcc.w	8000e0c <main+0x314>

	  }

	  HAL_Delay(2000);
 8001262:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001266:	f000 fa8b 	bl	8001780 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <main+0x7b0>)
 8001272:	f000 fd25 	bl	8001cc0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800127c:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <main+0x7b0>)
 800127e:	f000 fd1f 	bl	8001cc0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001288:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <main+0x7b0>)
 800128a:	f000 fd19 	bl	8001cc0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <main+0x7b0>)
 8001296:	f000 fd13 	bl	8001cc0 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800129a:	e573      	b.n	8000d84 <main+0x28c>
 800129c:	40700000 	.word	0x40700000
 80012a0:	2000007c 	.word	0x2000007c
 80012a4:	2000008c 	.word	0x2000008c
 80012a8:	48000800 	.word	0x48000800

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2238      	movs	r2, #56	@ 0x38
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fab4 	bl	8003828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012d2:	f001 fb0f 	bl	80028f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2340      	movs	r3, #64	@ 0x40
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fbb5 	bl	8002a5c <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012f8:	f000 f8e2 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001300:	2301      	movs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f001 feb3 	bl	8003080 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001320:	f000 f8ce 	bl	80014c0 <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3750      	adds	r7, #80	@ 0x50
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <MX_I2C3_Init+0x78>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <MX_I2C3_Init+0x7c>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_I2C3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001344:	2201      	movs	r2, #1
 8001346:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_I2C3_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_I2C3_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001366:	480e      	ldr	r0, [pc, #56]	@ (80013a0 <MX_I2C3_Init+0x74>)
 8001368:	f000 fcdc 	bl	8001d24 <HAL_I2C_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001372:	f000 f8a5 	bl	80014c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <MX_I2C3_Init+0x74>)
 800137a:	f001 fa23 	bl	80027c4 <HAL_I2CEx_ConfigAnalogFilter>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001384:	f000 f89c 	bl	80014c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001388:	2100      	movs	r1, #0
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_I2C3_Init+0x74>)
 800138c:	f001 fa65 	bl	800285a <HAL_I2CEx_ConfigDigitalFilter>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001396:	f000 f893 	bl	80014c0 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000028 	.word	0x20000028
 80013a4:	40007800 	.word	0x40007800
 80013a8:	00503d58 	.word	0x00503d58

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a35      	ldr	r2, [pc, #212]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a2f      	ldr	r2, [pc, #188]	@ (80014b4 <MX_GPIO_Init+0x108>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <MX_GPIO_Init+0x108>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <MX_GPIO_Init+0x108>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <MX_GPIO_Init+0x108>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <MX_GPIO_Init+0x108>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8001428:	4823      	ldr	r0, [pc, #140]	@ (80014b8 <MX_GPIO_Init+0x10c>)
 800142a:	f000 fc49 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 fc42 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 800143c:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4818      	ldr	r0, [pc, #96]	@ (80014b8 <MX_GPIO_Init+0x10c>)
 8001456:	f000 fa99 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145a:	2303      	movs	r3, #3
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <MX_GPIO_Init+0x10c>)
 800146e:	f000 fa8d 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_GPIO_Init+0x110>)
 8001488:	f000 fa80 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800148c:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f000 fa70 	bl	800198c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000800 	.word	0x48000800
 80014bc:	48000400 	.word	0x48000400

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001502:	f001 fa9b 	bl	8002a3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b09a      	sub	sp, #104	@ 0x68
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2244      	movs	r2, #68	@ 0x44
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f977 	bl	8003828 <memset>
  if(hi2c->Instance==I2C3)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <HAL_I2C_MspInit+0xa8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d137      	bne.n	80015b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001548:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4618      	mov	r0, r3
 8001554:	f001 ff78 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800155e:	f7ff ffaf 	bl	80014c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2302      	movs	r3, #2
 800158a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800158c:	2308      	movs	r3, #8
 800158e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001594:	4619      	mov	r1, r3
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <HAL_I2C_MspInit+0xb0>)
 8001598:	f000 f9f8 	bl	800198c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 80015a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_I2C_MspInit+0xac>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80015b4:	bf00      	nop
 80015b6:	3768      	adds	r7, #104	@ 0x68
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40007800 	.word	0x40007800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000800 	.word	0x48000800

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f891 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800164c:	480d      	ldr	r0, [pc, #52]	@ (8001684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 f8dd 	bl	8003838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fa3b 	bl	8000af8 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   r0, =_estack
 8001684:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001690:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 8001694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001698:	200000a4 	.word	0x200000a4

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>

0800169e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f93d 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f80e 	bl	80016d0 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e001      	b.n	80016c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff ff04 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c4:	79fb      	ldrb	r3, [r7, #7]

}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_InitTick+0x68>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d022      	beq.n	800172a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_InitTick+0x6c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_InitTick+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f93a 	bl	8001972 <HAL_SYSTICK_Config>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10f      	bne.n	8001724 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d809      	bhi.n	800171e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170a:	2200      	movs	r2, #0
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	f04f 30ff 	mov.w	r0, #4294967295
 8001712:	f000 f914 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_InitTick+0x70>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e007      	b.n	800172e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e004      	b.n	800172e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e001      	b.n	800172e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000008 	.word	0x20000008
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_IncTick+0x1c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_IncTick+0x20>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4413      	add	r3, r2
 8001752:	4a03      	ldr	r2, [pc, #12]	@ (8001760 <HAL_IncTick+0x1c>)
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	200000a0 	.word	0x200000a0
 8001764:	20000008 	.word	0x20000008

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200000a0 	.word	0x200000a0

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d004      	beq.n	80017a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_Delay+0x40>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a4:	bf00      	nop
 80017a6:	f7ff ffdf 	bl	8001768 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d8f7      	bhi.n	80017a6 <HAL_Delay+0x26>
  {
  }
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000008 	.word	0x20000008

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff47 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff5e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb2 	bl	80018e4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800199a:	e15a      	b.n	8001c52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 814c 	beq.w	8001c4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d005      	beq.n	80019cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d130      	bne.n	8001a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a02:	2201      	movs	r2, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 0201 	and.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d017      	beq.n	8001a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d123      	bne.n	8001abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	6939      	ldr	r1, [r7, #16]
 8001aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0203 	and.w	r2, r3, #3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80a6 	beq.w	8001c4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b00:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	4a5a      	ldr	r2, [pc, #360]	@ (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b0c:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b18:	4a56      	ldr	r2, [pc, #344]	@ (8001c74 <HAL_GPIO_Init+0x2e8>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b42:	d01f      	beq.n	8001b84 <HAL_GPIO_Init+0x1f8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a4c      	ldr	r2, [pc, #304]	@ (8001c78 <HAL_GPIO_Init+0x2ec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d019      	beq.n	8001b80 <HAL_GPIO_Init+0x1f4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_GPIO_Init+0x1f0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <HAL_GPIO_Init+0x2f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <HAL_GPIO_Init+0x1ec>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a49      	ldr	r2, [pc, #292]	@ (8001c84 <HAL_GPIO_Init+0x2f8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d007      	beq.n	8001b74 <HAL_GPIO_Init+0x1e8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a48      	ldr	r2, [pc, #288]	@ (8001c88 <HAL_GPIO_Init+0x2fc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_GPIO_Init+0x1e4>
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	e00a      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b70:	2306      	movs	r3, #6
 8001b72:	e008      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e006      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e004      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b84:	2300      	movs	r3, #0
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b96:	4937      	ldr	r1, [pc, #220]	@ (8001c74 <HAL_GPIO_Init+0x2e8>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc8:	4a30      	ldr	r2, [pc, #192]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bce:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf2:	4a26      	ldr	r2, [pc, #152]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c46:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_GPIO_Init+0x300>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f ae9d 	bne.w	800199c <HAL_GPIO_Init+0x10>
  }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	48001000 	.word	0x48001000
 8001c88:	48001400 	.word	0x48001400
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43d9      	mvns	r1, r3
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	400b      	ands	r3, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e08d      	b.n	8001e52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fbe2 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	@ 0x24
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d108      	bne.n	8001dc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	e007      	b.n	8001dd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69d9      	ldr	r1, [r3, #28]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	f040 80fd 	bne.w	8002078 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2C_Master_Transmit+0x30>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0f6      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e94:	f7ff fc68 	bl	8001768 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2319      	movs	r3, #25
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fa0a 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0e1      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2221      	movs	r2, #33	@ 0x21
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	893a      	ldrh	r2, [r7, #8]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2bff      	cmp	r3, #255	@ 0xff
 8001ee6:	d906      	bls.n	8001ef6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	22ff      	movs	r2, #255	@ 0xff
 8001eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e007      	b.n	8001f06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002084 <HAL_I2C_Master_Transmit+0x228>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fc05 	bl	8002760 <I2C_TransferConfig>
 8001f56:	e066      	b.n	8002026 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	8979      	ldrh	r1, [r7, #10]
 8001f60:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <HAL_I2C_Master_Transmit+0x228>)
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fbfa 	bl	8002760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f6c:	e05b      	b.n	8002026 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f9fd 	bl	8002372 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07b      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d034      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x1ca>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d130      	bne.n	8002026 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f976 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e04d      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2bff      	cmp	r3, #255	@ 0xff
 8001fe6:	d90e      	bls.n	8002006 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	22ff      	movs	r2, #255	@ 0xff
 8001fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	8979      	ldrh	r1, [r7, #10]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fbae 	bl	8002760 <I2C_TransferConfig>
 8002004:	e00f      	b.n	8002026 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fb9d 	bl	8002760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d19e      	bne.n	8001f6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9e3 	bl	8002400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e01a      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2220      	movs	r2, #32
 800204a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_I2C_Master_Transmit+0x22c>)
 8002058:	400b      	ands	r3, r1
 800205a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	80002000 	.word	0x80002000
 8002088:	fe00e800 	.word	0xfe00e800

0800208c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	f040 80db 	bne.w	8002264 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Receive+0x30>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0d4      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff fb50 	bl	8001768 <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2319      	movs	r3, #25
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8f2 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0bf      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2222      	movs	r2, #34	@ 0x22
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2210      	movs	r2, #16
 80020f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2bff      	cmp	r3, #255	@ 0xff
 8002116:	d90e      	bls.n	8002136 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	4b52      	ldr	r3, [pc, #328]	@ (8002270 <HAL_I2C_Master_Receive+0x1e4>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fb16 	bl	8002760 <I2C_TransferConfig>
 8002134:	e06d      	b.n	8002212 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	4b49      	ldr	r3, [pc, #292]	@ (8002270 <HAL_I2C_Master_Receive+0x1e4>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb05 	bl	8002760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002156:	e05c      	b.n	8002212 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f993 	bl	8002488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e07c      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d034      	beq.n	8002212 <HAL_I2C_Master_Receive+0x186>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d130      	bne.n	8002212 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	2200      	movs	r2, #0
 80021b8:	2180      	movs	r1, #128	@ 0x80
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f880 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e04d      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2bff      	cmp	r3, #255	@ 0xff
 80021d2:	d90e      	bls.n	80021f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	22ff      	movs	r2, #255	@ 0xff
 80021d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fab8 	bl	8002760 <I2C_TransferConfig>
 80021f0:	e00f      	b.n	8002212 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	b2da      	uxtb	r2, r3
 8002202:	8979      	ldrh	r1, [r7, #10]
 8002204:	2300      	movs	r3, #0
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 faa7 	bl	8002760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d19d      	bne.n	8002158 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6a39      	ldr	r1, [r7, #32]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f8ed 	bl	8002400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e01a      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_I2C_Master_Receive+0x1e8>)
 8002244:	400b      	ands	r3, r1
 8002246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	80002400 	.word	0x80002400
 8002274:	fe00e800 	.word	0xfe00e800

08002278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d103      	bne.n	8002296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d007      	beq.n	80022b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	619a      	str	r2, [r3, #24]
  }
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d0:	e03b      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f962 	bl	80025a0 <I2C_IsErrorOccurred>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e041      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d02d      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff fa3b 	bl	8001768 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <I2C_WaitOnFlagUntilTimeout+0x44>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d122      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	429a      	cmp	r2, r3
 8002320:	d113      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d0b4      	beq.n	80022d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237e:	e033      	b.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f90b 	bl	80025a0 <I2C_IsErrorOccurred>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e031      	b.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d025      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7ff f9e4 	bl	8001768 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11a      	bne.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d013      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d1c4      	bne.n	8002380 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	e02f      	b.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8c4 	bl	80025a0 <I2C_IsErrorOccurred>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02d      	b.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff f9a1 	bl	8001768 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11a      	bne.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b20      	cmp	r3, #32
 8002444:	d013      	beq.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1c8      	bne.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002498:	e071      	b.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f87e 	bl	80025a0 <I2C_IsErrorOccurred>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d13b      	bne.n	8002534 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d138      	bne.n	8002534 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d105      	bne.n	80024dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d121      	bne.n	800252e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2204      	movs	r2, #4
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2220      	movs	r2, #32
 80024fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800250c:	400b      	ands	r3, r1
 800250e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
 800252c:	e002      	b.n	8002534 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002534:	f7ff f918 	bl	8001768 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d119      	bne.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00f      	beq.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d002      	beq.n	8002592 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d083      	beq.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	fe00e800 	.word	0xfe00e800

080025a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d068      	beq.n	800269e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2210      	movs	r2, #16
 80025d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025d4:	e049      	b.n	800266a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d045      	beq.n	800266a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f8c3 	bl	8001768 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_IsErrorOccurred+0x54>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d13a      	bne.n	800266a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002616:	d121      	bne.n	800265c <I2C_IsErrorOccurred+0xbc>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800261e:	d01d      	beq.n	800265c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b20      	cmp	r3, #32
 8002624:	d01a      	beq.n	800265c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002636:	f7ff f897 	bl	8001768 <HAL_GetTick>
 800263a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263c:	e00e      	b.n	800265c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800263e:	f7ff f893 	bl	8001768 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b19      	cmp	r3, #25
 800264a:	d907      	bls.n	800265c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f043 0320 	orr.w	r3, r3, #32
 8002652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800265a:	e006      	b.n	800266a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b20      	cmp	r3, #32
 8002668:	d1e9      	bne.n	800263e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b20      	cmp	r3, #32
 8002676:	d003      	beq.n	8002680 <I2C_IsErrorOccurred+0xe0>
 8002678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0aa      	beq.n	80025d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f043 0308 	orr.w	r3, r3, #8
 80026d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800270c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01c      	beq.n	800274e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff fdaf 	bl	8002278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <I2C_IsErrorOccurred+0x1bc>)
 8002726:	400b      	ands	r3, r1
 8002728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800274e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002752:	4618      	mov	r0, r3
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	fe00e800 	.word	0xfe00e800

08002760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	4613      	mov	r3, r2
 8002770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002778:	7a7b      	ldrb	r3, [r7, #9]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	4313      	orrs	r3, r2
 800278a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800278e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	0d5b      	lsrs	r3, r3, #21
 800279a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <I2C_TransferConfig+0x60>)
 80027a0:	430b      	orrs	r3, r1
 80027a2:	43db      	mvns	r3, r3
 80027a4:	ea02 0103 	and.w	r1, r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	03ff63ff 	.word	0x03ff63ff

080027c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d138      	bne.n	800284c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e032      	b.n	800284e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	@ 0x24
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	d139      	bne.n	80028e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800287a:	2302      	movs	r3, #2
 800287c:	e033      	b.n	80028e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	@ 0x24
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d141      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002902:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290e:	d131      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002910:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002916:	4a46      	ldr	r2, [pc, #280]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800291c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002920:	4b43      	ldr	r3, [pc, #268]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002928:	4a41      	ldr	r2, [pc, #260]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800292e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002930:	4b40      	ldr	r3, [pc, #256]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2232      	movs	r2, #50	@ 0x32
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	3301      	adds	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002946:	e002      	b.n	800294e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3b01      	subs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294e:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d102      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f2      	bne.n	8002948 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002962:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800296e:	d158      	bne.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e057      	b.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800297a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002980:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002984:	e04d      	b.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298c:	d141      	bne.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800298e:	4b28      	ldr	r3, [pc, #160]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d131      	bne.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800299c:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a2:	4a23      	ldr	r2, [pc, #140]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2232      	movs	r2, #50	@ 0x32
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	0c9b      	lsrs	r3, r3, #18
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d2:	e002      	b.n	80029da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e6:	d102      	bne.n	80029ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f2      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fa:	d112      	bne.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e011      	b.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a10:	e007      	b.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a12:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40007000 	.word	0x40007000
 8002a34:	20000000 	.word	0x20000000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4a:	6093      	str	r3, [r2, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40007000 	.word	0x40007000

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e2fe      	b.n	800306c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d075      	beq.n	8002b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	4b97      	ldr	r3, [pc, #604]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a84:	4b94      	ldr	r3, [pc, #592]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3e>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x44>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x108>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d157      	bne.n	8002b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e2d9      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x74>
 8002ac2:	4b85      	ldr	r3, [pc, #532]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a84      	ldr	r2, [pc, #528]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7e      	ldr	r2, [pc, #504]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002af4:	4b78      	ldr	r3, [pc, #480]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a77      	ldr	r2, [pc, #476]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a74      	ldr	r2, [pc, #464]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fe28 	bl	8001768 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fe24 	bl	8001768 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e29e      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xc0>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fe14 	bl	8001768 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe10 	bl	8001768 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e28a      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	4b60      	ldr	r3, [pc, #384]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0xe8>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d075      	beq.n	8002c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b72:	4b59      	ldr	r3, [pc, #356]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7c:	4b56      	ldr	r3, [pc, #344]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x136>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_OscConfig+0x13c>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d11f      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x154>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e25d      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b49      	ldr	r3, [pc, #292]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	4946      	ldr	r1, [pc, #280]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fd81 	bl	80016d0 <HAL_InitTick>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d043      	beq.n	8002c5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e249      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fdbc 	bl	8001768 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fdb8 	bl	8001768 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e232      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	492d      	ldr	r1, [pc, #180]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
 8002c26:	e01a      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fd98 	bl	8001768 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fd94 	bl	8001768 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e20e      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4e:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1e0>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d041      	beq.n	8002cee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01c      	beq.n	8002cac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fd71 	bl	8001768 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fd6d 	bl	8001768 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1e7      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ef      	beq.n	8002c8a <HAL_RCC_OscConfig+0x22e>
 8002caa:	e020      	b.n	8002cee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd54 	bl	8001768 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc2:	e00d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fd50 	bl	8001768 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d906      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ca      	b.n	800306c <HAL_RCC_OscConfig+0x610>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ea      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a6 	beq.w	8002e48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d00:	4b84      	ldr	r3, [pc, #528]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2b4>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x2b6>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b7f      	ldr	r3, [pc, #508]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d22:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d32:	4b79      	ldr	r3, [pc, #484]	@ (8002f18 <HAL_RCC_OscConfig+0x4bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3e:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <HAL_RCC_OscConfig+0x4bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a75      	ldr	r2, [pc, #468]	@ (8002f18 <HAL_RCC_OscConfig+0x4bc>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fd0d 	bl	8001768 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fe fd09 	bl	8001768 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e183      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d64:	4b6c      	ldr	r3, [pc, #432]	@ (8002f18 <HAL_RCC_OscConfig+0x4bc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_RCC_OscConfig+0x32e>
 8002d78:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	4a65      	ldr	r2, [pc, #404]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d88:	e024      	b.n	8002dd4 <HAL_RCC_OscConfig+0x378>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d110      	bne.n	8002db4 <HAL_RCC_OscConfig+0x358>
 8002d92:	4b60      	ldr	r3, [pc, #384]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	4a5e      	ldr	r2, [pc, #376]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x378>
 8002db4:	4b57      	ldr	r3, [pc, #348]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	4a56      	ldr	r2, [pc, #344]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	4a52      	ldr	r2, [pc, #328]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fcc4 	bl	8001768 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fcc0 	bl	8001768 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e138      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	4b46      	ldr	r3, [pc, #280]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ed      	beq.n	8002de4 <HAL_RCC_OscConfig+0x388>
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fcad 	bl	8001768 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fca9 	bl	8001768 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e121      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e28:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ed      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e36:	7ffb      	ldrb	r3, [r7, #31]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b35      	ldr	r3, [pc, #212]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	4a34      	ldr	r2, [pc, #208]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d03c      	beq.n	8002ece <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e62:	4a2c      	ldr	r2, [pc, #176]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7fe fc7c 	bl	8001768 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e74:	f7fe fc78 	bl	8001768 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0f2      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e86:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ef      	beq.n	8002e74 <HAL_RCC_OscConfig+0x418>
 8002e94:	e01b      	b.n	8002ece <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fc5f 	bl	8001768 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eae:	f7fe fc5b 	bl	8001768 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0d5      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ef      	bne.n	8002eae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80c9 	beq.w	800306a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f000 8083 	beq.w	8002fec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d15e      	bne.n	8002fac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fc35 	bl	8001768 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	e00c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe fc31 	bl	8001768 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d905      	bls.n	8002f1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0ab      	b.n	800306c <HAL_RCC_OscConfig+0x610>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1c:	4b55      	ldr	r3, [pc, #340]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ec      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f28:	4b52      	ldr	r3, [pc, #328]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCC_OscConfig+0x61c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6a11      	ldr	r1, [r2, #32]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f42:	0212      	lsls	r2, r2, #8
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0552      	lsls	r2, r2, #21
 8002f50:	4311      	orrs	r1, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	0652      	lsls	r2, r2, #25
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f62:	06d2      	lsls	r2, r2, #27
 8002f64:	430a      	orrs	r2, r1
 8002f66:	4943      	ldr	r1, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a40      	ldr	r2, [pc, #256]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f78:	4b3e      	ldr	r3, [pc, #248]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a3d      	ldr	r2, [pc, #244]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fbf0 	bl	8001768 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fbec 	bl	8001768 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e066      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x530>
 8002faa:	e05e      	b.n	800306a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a30      	ldr	r2, [pc, #192]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fbd6 	bl	8001768 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fbd2 	bl	8001768 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e04c      	b.n	800306c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd2:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fde:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	4924      	ldr	r1, [pc, #144]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <HAL_RCC_OscConfig+0x620>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60cb      	str	r3, [r1, #12]
 8002fea:	e03e      	b.n	800306a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e039      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <HAL_RCC_OscConfig+0x618>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	429a      	cmp	r2, r3
 800300a:	d12c      	bne.n	8003066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	3b01      	subs	r3, #1
 8003018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d123      	bne.n	8003066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11b      	bne.n	8003066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d113      	bne.n	8003066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d109      	bne.n	8003066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	019f800c 	.word	0x019f800c
 800307c:	feeefffc 	.word	0xfeeefffc

08003080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e11e      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b91      	ldr	r3, [pc, #580]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b8e      	ldr	r3, [pc, #568]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	498c      	ldr	r1, [pc, #560]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e106      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d073      	beq.n	80031bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d129      	bne.n	8003130 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030dc:	4b81      	ldr	r3, [pc, #516]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0f4      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030ec:	f000 f966 	bl	80033bc <RCC_GetSysClockFreqFromPLLSource>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4a7c      	ldr	r2, [pc, #496]	@ (80032e8 <HAL_RCC_ClockConfig+0x268>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d93f      	bls.n	800317a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030fa:	4b7a      	ldr	r3, [pc, #488]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	d033      	beq.n	800317a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	d12f      	bne.n	800317a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800311a:	4b72      	ldr	r3, [pc, #456]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003122:	4a70      	ldr	r2, [pc, #448]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003128:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e024      	b.n	800317a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d107      	bne.n	8003148 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0c6      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	4b66      	ldr	r3, [pc, #408]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0be      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003158:	f000 f8ce 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 800315c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4a61      	ldr	r2, [pc, #388]	@ (80032e8 <HAL_RCC_ClockConfig+0x268>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d909      	bls.n	800317a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003166:	4b5f      	ldr	r3, [pc, #380]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316e:	4a5d      	ldr	r2, [pc, #372]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003174:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b5a      	ldr	r3, [pc, #360]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4957      	ldr	r1, [pc, #348]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318c:	f7fe faec 	bl	8001768 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fae8 	bl	8001768 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e095      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b4e      	ldr	r3, [pc, #312]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d023      	beq.n	8003210 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d4:	4b43      	ldr	r3, [pc, #268]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a42      	ldr	r2, [pc, #264]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031ec:	4b3d      	ldr	r3, [pc, #244]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031f4:	4a3b      	ldr	r2, [pc, #236]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4936      	ldr	r1, [pc, #216]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
 800320e:	e008      	b.n	8003222 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b80      	cmp	r3, #128	@ 0x80
 8003214:	d105      	bne.n	8003222 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003216:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4a32      	ldr	r2, [pc, #200]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800321c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003220:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003222:	4b2f      	ldr	r3, [pc, #188]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d21d      	bcs.n	800326c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003230:	4b2b      	ldr	r3, [pc, #172]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 020f 	bic.w	r2, r3, #15
 8003238:	4929      	ldr	r1, [pc, #164]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003240:	f7fe fa92 	bl	8001768 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fa8e 	bl	8001768 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e03b      	b.n	80032d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <HAL_RCC_ClockConfig+0x260>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d1ed      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4917      	ldr	r1, [pc, #92]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490f      	ldr	r1, [pc, #60]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032aa:	f000 f825 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <HAL_RCC_ClockConfig+0x264>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490c      	ldr	r1, [pc, #48]	@ (80032ec <HAL_RCC_ClockConfig+0x26c>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe f9fe 	bl	80016d0 <HAL_InitTick>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	04c4b400 	.word	0x04c4b400
 80032ec:	080038f4 	.word	0x080038f4
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d102      	bne.n	8003310 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800330a:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e047      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d102      	bne.n	8003322 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800331c:	4b26      	ldr	r3, [pc, #152]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e03e      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d136      	bne.n	800339c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3301      	adds	r3, #1
 8003344:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d10c      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800334c:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	4a16      	ldr	r2, [pc, #88]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003356:	68d2      	ldr	r2, [r2, #12]
 8003358:	0a12      	lsrs	r2, r2, #8
 800335a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
      break;
 8003364:	e00c      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003366:	4a13      	ldr	r2, [pc, #76]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	4a10      	ldr	r2, [pc, #64]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003370:	68d2      	ldr	r2, [r2, #12]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
      break;
 800337e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0e5b      	lsrs	r3, r3, #25
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e001      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033a0:	693b      	ldr	r3, [r7, #16]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	@ (800343c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d10c      	bne.n	80033fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033e0:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	4a14      	ldr	r2, [pc, #80]	@ (800343c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033ea:	68d2      	ldr	r2, [r2, #12]
 80033ec:	0a12      	lsrs	r2, r2, #8
 80033ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	617b      	str	r3, [r7, #20]
    break;
 80033f8:	e00c      	b.n	8003414 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4a0e      	ldr	r2, [pc, #56]	@ (800343c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	0a12      	lsrs	r2, r2, #8
 8003408:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    break;
 8003412:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003414:	4b09      	ldr	r3, [pc, #36]	@ (800343c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0e5b      	lsrs	r3, r3, #25
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	3301      	adds	r3, #1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800342e:	687b      	ldr	r3, [r7, #4]
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40021000 	.word	0x40021000
 8003440:	007a1200 	.word	0x007a1200
 8003444:	00f42400 	.word	0x00f42400

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003450:	2300      	movs	r3, #0
 8003452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003454:	2300      	movs	r3, #0
 8003456:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8098 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b43      	ldr	r3, [pc, #268]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10d      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	4a3f      	ldr	r2, [pc, #252]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	@ 0x58
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003492:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a39      	ldr	r2, [pc, #228]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800349e:	f7fe f963 	bl	8001768 <HAL_GetTick>
 80034a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a4:	e009      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fe f95f 	bl	8001768 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d902      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	74fb      	strb	r3, [r7, #19]
        break;
 80034b8:	e005      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ef      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d159      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01e      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d019      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e8:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f4:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003514:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe f91f 	bl	8001768 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352c:	e00b      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe f91b 	bl	8001768 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d902      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	74fb      	strb	r3, [r7, #19]
            break;
 8003544:	e006      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003546:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ec      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355a:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	4903      	ldr	r1, [pc, #12]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	74bb      	strb	r3, [r7, #18]
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003584:	7c7b      	ldrb	r3, [r7, #17]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4ba6      	ldr	r3, [pc, #664]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	4aa5      	ldr	r2, [pc, #660]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003594:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f023 0203 	bic.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	499c      	ldr	r1, [pc, #624]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c4:	4b97      	ldr	r3, [pc, #604]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	f023 020c 	bic.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4994      	ldr	r1, [pc, #592]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	498b      	ldr	r1, [pc, #556]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003608:	4b86      	ldr	r3, [pc, #536]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4983      	ldr	r1, [pc, #524]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800362a:	4b7e      	ldr	r3, [pc, #504]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	497a      	ldr	r1, [pc, #488]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364c:	4b75      	ldr	r3, [pc, #468]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	4972      	ldr	r1, [pc, #456]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366e:	4b6d      	ldr	r3, [pc, #436]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4969      	ldr	r1, [pc, #420]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003690:	4b64      	ldr	r3, [pc, #400]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4961      	ldr	r1, [pc, #388]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	4958      	ldr	r1, [pc, #352]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d4:	4b53      	ldr	r3, [pc, #332]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	4950      	ldr	r1, [pc, #320]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800370c:	4b45      	ldr	r3, [pc, #276]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	4942      	ldr	r1, [pc, #264]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b3d      	ldr	r3, [pc, #244]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a3c      	ldr	r2, [pc, #240]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003744:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	4934      	ldr	r1, [pc, #208]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003762:	d105      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003764:	4b2f      	ldr	r3, [pc, #188]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800377c:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	4926      	ldr	r1, [pc, #152]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379a:	d105      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379c:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	4918      	ldr	r1, [pc, #96]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d2:	d105      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d4:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	490a      	ldr	r1, [pc, #40]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380a:	d105      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800380c:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003816:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003818:	7cbb      	ldrb	r3, [r7, #18]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4d0d      	ldr	r5, [pc, #52]	@ (8003870 <__libc_init_array+0x38>)
 800383c:	4c0d      	ldr	r4, [pc, #52]	@ (8003874 <__libc_init_array+0x3c>)
 800383e:	1b64      	subs	r4, r4, r5
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	2600      	movs	r6, #0
 8003844:	42a6      	cmp	r6, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	4d0b      	ldr	r5, [pc, #44]	@ (8003878 <__libc_init_array+0x40>)
 800384a:	4c0c      	ldr	r4, [pc, #48]	@ (800387c <__libc_init_array+0x44>)
 800384c:	f000 f818 	bl	8003880 <_init>
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	2600      	movs	r6, #0
 8003856:	42a6      	cmp	r6, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003860:	4798      	blx	r3
 8003862:	3601      	adds	r6, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	f855 3b04 	ldr.w	r3, [r5], #4
 800386a:	4798      	blx	r3
 800386c:	3601      	adds	r6, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	08003904 	.word	0x08003904
 8003874:	08003904 	.word	0x08003904
 8003878:	08003904 	.word	0x08003904
 800387c:	08003908 	.word	0x08003908

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
